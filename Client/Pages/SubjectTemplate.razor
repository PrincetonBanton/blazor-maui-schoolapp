@* @page "/subject/template" *@
@page "/subject/template/{SubjectId:guid}"

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Text.Json;
@using SchoolApp.Shared.Models

@if (Subject == null)
{
   <p>Loading...</p>
}
else
{
    <h4>@Subject.Name</h4>
    @if (Subject.Components != null && Subject.Components.Any())
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th class="text-center" style="width: 15%;">Component</th>
                    <th class="text-center" style="width: 10%;">% of Subject</th>
                    <th class="text-center" style="width: 15%;">Subcomponent</th>
                    <th class="text-center" style="width: 10%;">% of Component</th>
                    <th class="text-center" style="width: 10%;">1st</th>
                    <th class="text-center" style="width: 10%;">2nd</th>
                    <th class="text-center" style="width: 10%;">3rd</th>
                    <th class="text-center" style="width: 10%;">4th</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var component in Subject.Components)
                {
                    int comSubCount = component.Subcomponents?.Count ?? 1; 
                    for (int i = 0; i < comSubCount; i++)
                    {
                        var comSub = component.Subcomponents?.ElementAtOrDefault(i);
                        <tr>
                            @if (i == 0)
                            {
                                <td rowspan="@comSubCount">@component.Name</td>
                                <td rowspan="@comSubCount">@component.Percentage %</td>
                            }

                            @if (comSub != null)
                            {
                                <td>@comSub.Name</td>
                                <td>@comSub.Percentage %</td>

                                @for (int gradingPeriod = 1; gradingPeriod <= 4; gradingPeriod++)
                                {
                                    var loopGrading = gradingPeriod;
                                    var subWithItems = SubjectGradingItems.SingleOrDefault(
                                        g => g.SubjectId == SubjectId && g.SubcomponentId == comSub.Id && g.GradingPeriod == loopGrading);

                                    int subItems = subWithItems?.ItemCount ?? 0;
                                    Guid? subjectGradingItemId = subWithItems?.Id;
                                    <td style="text-align:center">
                                        @if (subItems == 0)
                                        {
                                            <div style="display:inline-block; border:1px solid #ccc; border-radius:4px; padding:4px 8px; min-width:100px; text-align:center; cursor:pointer;"
                                                 @onclick="() => OpenGradeInputModal(comSub.Id, comSub.Name, loopGrading, subItems)">
                                                +
                                            </div>
                                        }
                                        else
                                        {
                                        <div class="d-inline-flex align-items-center" style="gap: 10px;">
                                            <div style="display:inline-block; border:1px solid #ccc; border-radius:4px; padding:4px 8px; min-width:50px; text-align:center; cursor:pointer;"
                                                @onclick="() => OpenGradeEditModal(SubjectId, comSub.Id, loopGrading, subItems, subjectGradingItemId)">
                                                @subItems
                                            </div>
                                            <button class="btn btn-warning btn-sm"
                                                @onclick="() => NavigateToItemResult(subjectGradingItemId)">
                                                Scores
                                            </button>
                                        </div>
                                        }
                                    </td>
                                }
                            }
                            else
                            {
                                <td colspan="6"><em>No subcomponents</em></td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
    else
    {
        <p><em>No components found for this subject.</em></p>
    }
}

@if (ShowGradeInputModal)
{
    <div class="modal-backdrop fade show" style="z-index: 1040;"></div>
    <div class="modal fade show d-block" tabindex="-1" style="z-index: 1050;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content"> 
                <div class="modal-header">
                    <h5 class="modal-title">Enter Item Count</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseGradeInputModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="itemCountInput" class="form-label">Item Count:</label>
                        <input type="number" id="itemCountInput" class="form-control" @bind-value="ModalItemCount" min="0" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseGradeInputModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="HandleGradeSave">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Guid SubjectId { get; set; }
    private Subject? Subject;
    private List<SubjectGradingItem> SubjectGradingItems { get; set; } = new List<SubjectGradingItem>();
    
    private bool ShowGradeInputModal = false;
    private Guid ModalSubcomponentId { get; set; }
    private Guid? ModalSubjectGradingItemId { get; set; }
    private string ModalSubcomponentName { get; set; } = string.Empty;
    private int ModalGradingPeriod { get; set; }
    private int ModalItemCount { get; set; } 

    protected override async Task OnInitializedAsync()
    {
        Subject = await Http.GetFromJsonAsync<Subject>($"api/subject/{SubjectId}");
        await LoadExistingItems();
    }

    private async Task LoadExistingItems()
    {
        SubjectGradingItems.Clear(); 
        try
        {
            var items = await Http.GetFromJsonAsync<List<SubjectGradingItem>>($"api/SubjectGradingItem/by-subject/{SubjectId}");
            if (items != null)
            {
                SubjectGradingItems.AddRange(items); 
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Failed to load existing grades: {ex.Message}");
        }
    }

    private void OpenGradeInputModal(Guid subcomponentId, string subcomponentName, int gradingPeriod, int currentItemCount)
    {
        ModalSubcomponentId = subcomponentId;
        ModalSubcomponentName = subcomponentName;
        ModalGradingPeriod = gradingPeriod;
        ModalItemCount = currentItemCount;
        ModalSubjectGradingItemId = null; // Ensure this is null when saving a new entry
        ShowGradeInputModal = true;
    }

    private async Task OpenGradeEditModal(Guid subjectId, Guid subcomponentId, int gradingPeriod, int itemCount, Guid? subjectGradingItemId)
    {
        ModalSubcomponentId = subcomponentId;
        ModalSubcomponentName = "";
        ModalGradingPeriod = gradingPeriod;
        ModalItemCount = itemCount;
        ModalSubjectGradingItemId = subjectGradingItemId;      
        ShowGradeInputModal = true;                             
    }

    private void CloseGradeInputModal()
    {
        ShowGradeInputModal = false;
    }

    private async Task HandleGradeSave()
    {
        ShowGradeInputModal = false; 
        var subjectGradingItem = new SubjectGradingItem
        {
            SubjectId = SubjectId,
            SubcomponentId = ModalSubcomponentId,
            GradingPeriod = ModalGradingPeriod,
            ItemCount = ModalItemCount
        };

        try
        {
            HttpResponseMessage response;

            if (ModalSubjectGradingItemId.HasValue && ModalSubjectGradingItemId.Value != Guid.Empty)
            {
                subjectGradingItem.Id = ModalSubjectGradingItemId.Value; // Assign the existing ID
                response = await Http.PutAsJsonAsync($"api/SubjectGradingItem/{subjectGradingItem.Id}", subjectGradingItem);
            }
            else
            {
                response = await Http.PostAsJsonAsync("api/SubjectGradingItem", subjectGradingItem);
            }

            if (response.IsSuccessStatusCode)
            {
                if (ModalSubjectGradingItemId.HasValue && ModalSubjectGradingItemId.Value != Guid.Empty)
                {
                    // If it was an edit, find the existing item in the local list and update its ItemCount
                    var existing = SubjectGradingItems.FirstOrDefault(sgi => sgi.Id == ModalSubjectGradingItemId.Value);
                    if (existing != null)
                    {
                        existing.ItemCount = subjectGradingItem.ItemCount;
                    }
                }
                else
                {
                    var createdItem = await response.Content.ReadFromJsonAsync<SubjectGradingItem>();
                    if (createdItem != null)
                    {
                        SubjectGradingItems.Add(createdItem);
                    }
                }

                await JS.InvokeVoidAsync("alert", "Items saved successfully!");
                StateHasChanged();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to save items: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error saving items: {ex.Message}");
        }
    }

    private void NavigateToItemResult(Guid? subjectGradingItemId)
    {
        if (subjectGradingItemId.HasValue && subjectGradingItemId.Value != Guid.Empty)
        {
            NavigationManager.NavigateTo($"/itemresult/{subjectGradingItemId.Value}");
        }
        else
        {
            JS.InvokeVoidAsync("alert", "Cannot input results: No valid SubjectGradingItem ID found.");
        }
    }

}
