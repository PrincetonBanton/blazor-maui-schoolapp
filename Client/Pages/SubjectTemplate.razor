@page "/subject/template/{SubjectId:guid}"

@inject HttpClient Http
@inject IJSRuntime JS
@using System.Text.Json
@using SchoolApp.Shared.Models
@using SchoolApp.Client.Helpers
@inject NavigationManager NavigationManager
@inject SchoolApp.Shared.Services.SchoolContextService SchoolContext

@if (Subject == null)
{
    <LoadingSpinner />
}
else
{
@*     <div class="d-flex align-items-center">
        <select class="form-select me-2" style="width: 300px;" @onchange="OnSubjectChanged">
            <option value="">-- Choose Subject --</option>
            @foreach (var subject in Subjects)
            {
                <option value="@subject.Id">@subject.Name</option>
            }
        </select>
    </div> *@


    <h4>@Subject.Name</h4>
    @if (Subject.Components != null && Subject.Components.Any())
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th class="text-center" style="width: 10%;">Component</th>
                    <th class="text-center" style="width: 10%;">% of Subject</th>
                    <th class="text-center" style="width: 10%;">Subcomponent</th>
                    <th class="text-center" style="width: 10%;">% of Component</th>
                    <th class="text-center" style="width: 12%;">1st</th>
                    <th class="text-center" style="width: 12%;">2nd</th>
                    <th class="text-center" style="width: 12%;">3rd</th>
                    <th class="text-center" style="width: 12%;">4th</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var component in Subject.Components)
                {
                    int comSubCount = component.Subcomponents?.Count ?? 1; 
                    for (int i = 0; i < comSubCount; i++)
                    {
                        var comSub = component.Subcomponents?.ElementAtOrDefault(i);
                        <tr>
                            @if (i == 0)
                            {
                                <td rowspan="@comSubCount">@component.Name</td>
                                <td rowspan="@comSubCount">@component.Percentage %</td>
                            }

                            @if (comSub != null)
                            {
                                <td>@comSub.Name</td>
                                <td>@comSub.Percentage %</td>

                                @for (int gradingPeriod = 1; gradingPeriod <= 4; gradingPeriod++)
                                {
                                    var loopGrading = gradingPeriod;
                                    var subWithItems = SubGradingItems.SingleOrDefault(
                                        g => g.SubjectId == SelectedSubjectId && g.SubcomponentId == comSub.Id && g.GradingPeriod == loopGrading);

                                    int subItems = subWithItems?.ItemCount ?? 0;
                                    Guid? subGradingItemId = subWithItems?.Id;
                                    <td style="text-align:center">
                                        @if (subItems == 0)
                                        {
                                            <div style="display:inline-block; border:1px solid #ccc; border-radius:4px; padding:4px 8px; min-width:100px; text-align:center; cursor:pointer;"
                                                 @onclick="() => OpenGradeInputModal(comSub.Id, comSub.Name, loopGrading, subItems)">
                                                +
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="d-inline-flex align-items-center" style="gap: 10px;">
                                                <div style="display:inline-block; border:1px solid #ccc; border-radius:4px; padding:4px 8px; min-width:100px; text-align:center; cursor:pointer;"
                                                     @onclick="() => OpenGradeEditModal(SelectedSubjectId.Value, comSub.Id, loopGrading, subItems, subGradingItemId)">
                                                    @subItems
                                                </div>
                                                <button class="btn btn-warning btn-sm"
                                                        @onclick="() => NavigateToItemResult(subGradingItemId)">
                                                    Scores
                                                </button>
                                            </div>
                                        }
                                    </td>
                                }
                            }
                            else
                            {
                                <td colspan="6"><em>No subcomponents</em></td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
    else
    {
        <p><em>No components found for this subject.</em></p>
    }
}

@if (ShowGradeInputModal)
{
    <div class="modal-backdrop fade show" style="z-index: 1040;"></div>
    <div class="modal fade show d-block" tabindex="-1" style="z-index: 1050;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content"> 
                <div class="modal-header">
                    <h5 class="modal-title">Enter Item Count</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseGradeInputModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="itemCountInput" class="form-label">Item Count:</label>
                        <input type="number" id="itemCountInput" class="form-control" @bind-value="ModalItemCount" min="0" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseGradeInputModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="HandleGradeSave">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Guid SubjectId { get; set; }

    private Subject? Subject;
    private List<Subject> Subjects = new();
    private List<SubGradingItem> SubGradingItems { get; set; } = new();

    private Guid? _selectedSubjectId;
    private Guid? SelectedSubjectId
    {
        get => _selectedSubjectId;
        set => OnSelectedSubjectChanged(value);
    }

    private bool ShowGradeInputModal = false;
    private Guid ModalSubcomponentId { get; set; }
    private Guid? ModalSubGradingItemId { get; set; }
    private string ModalSubcomponentName { get; set; } = string.Empty;
    private int ModalGradingPeriod { get; set; }
    private int ModalItemCount { get; set; } 

    protected override async Task OnInitializedAsync()
    {
        await LoadSubjects();

        if (SubjectId != Guid.Empty)
        {
            _selectedSubjectId = SubjectId;
            await LoadSubjectAndItems(SubjectId);
        }
    }

    private async Task LoadSubjects()
    {
        try
        {
            var allSubjects = await Http.GetFromJsonAsync<List<Subject>>("api/subject") ?? new();

            if (SchoolContext.SelectedGradeLevelId.HasValue)
            {
                Subjects = allSubjects
                    .Where(s => s.GradeLevelId == SchoolContext.SelectedGradeLevelId.Value && s.IsValidated)
                    .ToList();
            }
            else
            {
                Subjects = new();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error loading subjects: {ex.Message}");
        }
    }

    private async Task OnSubjectChanged(ChangeEventArgs e)
    {
        if (SelectedSubjectId.HasValue)
        {
            NavigationManager.NavigateTo($"/subject/template/{SelectedSubjectId.Value}");
            await LoadSubjectAndItems(SelectedSubjectId.Value);
        }
        else
        {
            Subject = null;
            SubGradingItems.Clear();
        }
    }

    private async Task OnSelectedSubjectChanged(Guid? value)
    {
        _selectedSubjectId = value;

        if (_selectedSubjectId.HasValue && _selectedSubjectId.Value != Guid.Empty)
        {
            if (_selectedSubjectId.Value != SubjectId)
            {
                NavigationManager.NavigateTo($"/subject/template/{_selectedSubjectId.Value}");
            }

            await LoadSubjectAndItems(_selectedSubjectId.Value);
        }
        else
        {
            Subject = null;
            SubGradingItems.Clear();
        }
    }

    private async Task LoadSubjectAndItems(Guid subjectId)
    {
        Subject = await Http.GetFromJsonAsync<Subject>($"api/subject/{subjectId}");
        await LoadExistingItems(subjectId);
    }

    private async Task LoadExistingItems(Guid subjectId)
    {
        SubGradingItems.Clear(); 
        try
        {
            var items = await Http.GetFromJsonAsync<List<SubGradingItem>>($"api/SubGradingItem/by-subject/{subjectId}");
            if (items != null)
            {
                SubGradingItems.AddRange(items); 
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Failed to load existing grades: {ex.Message}");
        }
    }

    private void OpenGradeInputModal(Guid subcomponentId, string subcomponentName, int gradingPeriod, int currentItemCount)
    {
        ModalSubcomponentId = subcomponentId;
        ModalSubcomponentName = subcomponentName;
        ModalGradingPeriod = gradingPeriod;
        ModalItemCount = currentItemCount;
        ModalSubGradingItemId = null;
        ShowGradeInputModal = true;
    }

    private async Task OpenGradeEditModal(Guid subjectId, Guid subcomponentId, int gradingPeriod, int itemCount, Guid? subGradingItemId)
    {
        ModalSubcomponentId = subcomponentId;
        ModalSubcomponentName = "";
        ModalGradingPeriod = gradingPeriod;
        ModalItemCount = itemCount;
        ModalSubGradingItemId = subGradingItemId;      
        ShowGradeInputModal = true;                             
    }

    private void CloseGradeInputModal()
    {
        ShowGradeInputModal = false;
    }

    private async Task HandleGradeSave()
    {
        ShowGradeInputModal = false; 

        var subGradingItem = new SubGradingItem
        {
            SubjectId = SelectedSubjectId!.Value,
            SubcomponentId = ModalSubcomponentId,
            GradingPeriod = ModalGradingPeriod,
            ItemCount = ModalItemCount
        };

        try
        {
            HttpResponseMessage response;

            if (ModalSubGradingItemId.HasValue && ModalSubGradingItemId.Value != Guid.Empty)
            {
                subGradingItem.Id = ModalSubGradingItemId.Value;
                response = await Http.PutAsJsonAsync($"api/SubGradingItem/{subGradingItem.Id}", subGradingItem);
            }
            else
            {
                response = await Http.PostAsJsonAsync("api/SubGradingItem", subGradingItem);
            }

            if (response.IsSuccessStatusCode)
            {
                if (ModalSubGradingItemId.HasValue && ModalSubGradingItemId.Value != Guid.Empty)
                {
                    var existing = SubGradingItems.FirstOrDefault(sgi => sgi.Id == ModalSubGradingItemId.Value);
                    if (existing != null)
                    {
                        existing.ItemCount = subGradingItem.ItemCount;
                    }
                }
                else
                {
                    var createdItem = await response.Content.ReadFromJsonAsync<SubGradingItem>();
                    if (createdItem != null)
                    {
                        SubGradingItems.Add(createdItem);
                    }
                }

                await JS.InvokeVoidAsync("alert", "Items saved successfully!");
                StateHasChanged();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to save items: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error saving items: {ex.Message}");
        }
    }

    private void NavigateToItemResult(Guid? subGradingItemId)
    {
        if (subGradingItemId.HasValue && subGradingItemId.Value != Guid.Empty)
        {
            NavigationManager.NavigateTo($"/itemresult/{subGradingItemId.Value}");
        }
        else
        {
            JS.InvokeVoidAsync("alert", "Cannot input results: No valid SubjectGradingItem ID found.");
        }
    }
}
