@page "/students/card"
@page "/students/card/{StudentId:guid}"

@inject HttpClient Http
@inject IJSRuntime JS
@using System.Text.Json
@inject NavigationManager NavigationManager
@using SchoolApp.Shared.Models

@if (Student == null)
{
    @if (AllStudents == null)
    {
        <p><em>Loading students...</em></p>
    }
    else if (AllStudents.Count == 0)
    {
        <p><strong>No students available.</strong></p>
    }
    else
    {
        <div class="mb-3">
            <select class="form-select" style="width: 300px;" @onchange="OnStudentSelected">
                <option value="">-- Choose a Student --</option>
                @foreach (var s in AllStudents)
                {
                    <option value="@s.Id">@s.FullName</option>
                }
            </select>
        </div>
    }
}
else
{
    <div class="card-body d-flex align-items-start">
        <img src="id_pic.png"
                alt="Student Photo"
                class="rounded border me-3"
                style="width: 150px; height: 150px; object-fit: cover;" />

        <div>
            <h4 class="mb-1"><strong>@Student.FullName</strong></h4>
            <p class="mb-1">Birthdate: @Student.DateOfBirth</p>
            <p class="mb-1">Gender: @Student.Gender</p>
            <p class="mb-1">Address: @Student.Address</p>
            <p class="mb-1">Guardian: Parents Name</p>
            <p class="mb-1">Contact#: @Student.ContactNumber</p>
        </div>
    </div>

    @if (Subjects == null)
    {
        <p>Loading subjects...</p>
    }
    else if (!Subjects.Any())
    {
        <p>No subjects found for report card.</p>
    }
    else
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Subject</th>
                    <th>1st Grading</th>
                    <th>2nd Grading</th>
                    <th>3rd Grading</th>
                    <th>4th Grading</th>
                    <th>Final Grade</th>
                    <th>Remarks</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var subject in Subjects)
                {
                    var first = GetStudentScore(subject.Id, Student.Id, 1);
                    var second = GetStudentScore(subject.Id, Student.Id, 2);
                    var third = GetStudentScore(subject.Id, Student.Id, 3);
                    var fourth = GetStudentScore(subject.Id, Student.Id, 4);

                    var finalGrade = (first + second + third + fourth) / 4;
                    var remarks = finalGrade >= 75 ? "Passed" : "Failed";
                    var remarksClass = finalGrade >= 75 ? "text-success" : "text-danger";

                    <tr>
                        <td>@subject.Name</td>
                        <td class="text-center">@first</td>
                        <td class="text-center">@second</td>
                        <td class="text-center">@third</td>
                        <td class="text-center">@fourth</td>
                        <td class="text-center"><strong>@finalGrade</strong></td>
                        <td class="text-center @remarksClass">@remarks</td>
                    </tr>
                }

            </tbody>

        </table>
    }
}

@code {
    [Parameter] public Guid StudentId { get; set; }
    private Student? Student;
    private List<Student> AllStudents;
    private List<Subject> Subjects;
    private List<SubGradingItem> SubGradingItems = new();
    private List<SubGradingScore> SubGradingScores = new();

    protected override async Task OnParametersSetAsync()
    {
        if (StudentId == Guid.Empty)
        {
            Student = null;
            try
            {
                AllStudents = await Http.GetFromJsonAsync<List<Student>>("api/student");
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Failed to load students: {ex.Message}");
            }
        }
        else
        {
            try
            {
                Student = await Http.GetFromJsonAsync<Student>($"api/student/{StudentId}");
                Subjects = await Http.GetFromJsonAsync<List<Subject>>("api/subject");
                SubGradingItems = await Http.GetFromJsonAsync<List<SubGradingItem>>("api/SubGradingItem");
                SubGradingScores = await Http.GetFromJsonAsync<List<SubGradingScore>>($"api/SubGradingScore/ByStudent/{StudentId}"); 

            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Failed to fetch data: {ex.Message}");
            }
        }
    }

    private double GetStudentScore(Guid subjectId, Guid studentId, int gradingPeriod)
    {
        var itemsForSubject = SubGradingItems
            .Where(i => i.SubjectId == subjectId && i.GradingPeriod == gradingPeriod) // Added filter
            .Select(i => i.Id)
            .ToList();

        // var json = JsonSerializer.Serialize(itemsForSubject, new JsonSerializerOptions { WriteIndented = true });
        // JS.InvokeVoidAsync("alert", "items for the subject " + json);

        var scores = SubGradingScores
            .Where(s => itemsForSubject.Contains(s.SubGradingItemId) &&
                        s.StudentId == studentId &&
                        s.GradingPeriod == gradingPeriod)
            .Select(s => s.PercentSubject);
        return scores.Any() ? scores.Sum() : 0;
    }

     private void OnStudentSelected(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out Guid selectedId))
        {
            NavigationManager.NavigateTo($"/students/card/{selectedId}");
        }
    }
}

