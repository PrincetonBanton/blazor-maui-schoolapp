@page "/itemresult/{SubGradingItemId:guid}"

@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

@using SchoolApp.Shared.Models
@using System.Text.Json;

@if (SubGradingItem == null)
{
    <p><em>Loading item details...</em></p>
}
else
{
    <div class="card shadow-sm mb-3" style="width: 50%;">
        <div class="card-body p-3">
            <div class="row">
                <div class="col">
                    <strong>Subject:</strong> @Subject?.Name <br />
                    <strong>Grading Period:</strong> @(SubGradingItem.GradingPeriod switch {
                        1 => "1st", 2 => "2nd", 3 => "3rd", 4 => "4th", _ => SubGradingItem.GradingPeriod.ToString()
                    }) <br />
                </div>
                <div class="col">
                    <strong>Component:</strong> @Component?.Name <br />
                    <strong>Subcomponent:</strong> @Subcomponent?.Name <br />
                </div>
                <div class="col">
                    <strong>% to Component:</strong> @Subcomponent?.Percentage% <br />
                    <strong>% to Subject:</strong> @(Subcomponent?.Percentage * Component?.Percentage / 100 ?? 0)% <br />
                </div>
            </div>
        </div>
    </div>

    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th style="width: 5%;">#</th> 
                <th style="width: 35%;">Student Name</th>
                <th style="width: 15%;">Items</th>
                <th style="width: 15%;">Result</th>
                <th style="width: 15%;">% to Items</th>
                <th style="width: 15%;">% to Subject</th>
            </tr>
        </thead>
        <tbody>
            @{
                var index = 1;
            }
        @foreach (var student in Students)
        {
            var score = GetScore(student.Id);
            var itemCount = SubGradingItem.ItemCount;
            var percentToItems = itemCount > 0 ? (double)score / itemCount * 100 : 0;
            var percentToSubject = percentToItems * ((Subcomponent?.Percentage ?? 0) * (Component?.Percentage ?? 0)) / 10000;

            <tr>
                <td>@index</td> 
                <td>@($"{student.FirstName} {student.LastName}")</td>
                <td>@itemCount</td>

                <td>
                    @if (SubGradingItem != null)
                    {
                        var json = JsonSerializer.Serialize(SubGradingItem, new JsonSerializerOptions { WriteIndented = true });
                        JS.InvokeVoidAsync("alert", json);
                    }

                    <input class="form-control"
                           value="@score"
                           @onchange="(e) => HandleScoreChange(e, student.Id)" />
                </td>

                <td>@percentToItems</td>
                <td>@percentToSubject</td>
            </tr>
            index++;
        }

        </tbody>
    </table>
    <div class="mt-3">
        <button class="btn btn-success" @onclick="ConfirmSaveAll">Save All Scores</button>
    </div>
}

@code {
    [Parameter] public Guid SubGradingItemId { get; set; }

    private SubGradingItem? SubGradingItem;
    private Subject? Subject;
    private Component? Component;
    private Subcomponent? Subcomponent;
    private List<Student> Students = new();
    private Dictionary<Guid, int> StudentScores = new(); 
    private List<StudentSubScore> StudentScores_ = new();


    protected override async Task OnInitializedAsync()
    {
        Students = await Http.GetFromJsonAsync<List<Student>>("api/student");

        if (SubGradingItemId == Guid.Empty)
        {
            await JS.InvokeVoidAsync("alert", "Invalid SubjectGradingItem ID.");
            NavigationManager.NavigateTo("/");
            return;
        }

        try
        {
            SubGradingItem = await Http.GetFromJsonAsync<SubGradingItem>($"api/SubGradingItem/{SubGradingItemId}");
            if (SubGradingItem == null)
            {
                await JS.InvokeVoidAsync("alert", "Subject Grading Item not found.");
                NavigationManager.NavigateTo("/");
                return;
            }

            Subject = await Http.GetFromJsonAsync<Subject>($"api/subject/{SubGradingItem.SubjectId}");
            if (Subject != null)
            {
                Component = Subject.Components?.FirstOrDefault(c => c.Subcomponents.Any(s => s.Id == SubGradingItem.SubcomponentId));
                Subcomponent = Component?.Subcomponents.FirstOrDefault(s => s.Id == SubGradingItem.SubcomponentId);
            }

        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error loading item results: {ex.Message}");
            Console.WriteLine($"Error: {ex.Message}");
        }

    }
    private async Task LoadExistingScores()
    {
        StudentScores_.Clear(); 
        try
        {
            // var scores = await Http.GetFromJsonAsync<List<SubjectGradingItem>>($"api/SubjectGradingItem/by-subject/{ItemId}");
            // if (scores != null)
            // {
            //     StudentScores_.AddRange(scores); 
            // }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Failed to load existing scores: {ex.Message}");
        }
    }

    private void HandleScoreChange(ChangeEventArgs e, Guid studentId)
    {
        var inputValue = e.Value?.ToString();
        OnScoreChanged(studentId, inputValue);
    }

    private async void OnScoreChanged(Guid studentId, string? score)
    {
        if (!int.TryParse(score, out int parsedScore))
        {
            StudentScores[studentId] = 0;
            await JS.InvokeVoidAsync("alert", "Invalid number entered.");
            StateHasChanged();
            return;
        }

        if (SubGradingItem != null && parsedScore > SubGradingItem.ItemCount)
        {
            await JS.InvokeVoidAsync("alert", $"Score cannot be greater than {SubGradingItem.ItemCount}.");
            StudentScores[studentId] = SubGradingItem.ItemCount;
        }
        else
        {
            StudentScores[studentId] = parsedScore;
        }

        StateHasChanged(); // re-render the table
    }

    private int GetScore(Guid studentId)
    {
        return StudentScores.TryGetValue(studentId, out var score) ? score : 0;
    }

    private async Task ConfirmSaveAll()
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to save all scores?");
        if (!confirmed || SubGradingItem == null)
            return;

        var payload = new List<StudentSubScore>();

        foreach (var entry in StudentScores)
        {
            var studentId = entry.Key;
            var score = entry.Value;

            payload.Add(new StudentSubScore
            {
                StudentId = studentId,
                SubcomponentId = SubGradingItem.SubcomponentId,
                GradingPeriod = SubGradingItem.GradingPeriod,
                ScoreObtained = score,
                DateRecorded = DateTime.Now
            });
        }

        try
        {
            var response = await Http.PostAsJsonAsync("api/StudentSubScore/Bulk", payload);
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Scores saved successfully!");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to save scores: {error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error saving scores: {ex.Message}");
        }
    }


}