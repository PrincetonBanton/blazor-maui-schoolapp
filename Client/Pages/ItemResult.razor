@page "/itemresult/{SubjectGradingItemId:guid}"

@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

@using SchoolApp.Shared.Models
@using System.Text.Json;

@if (SubjectGradingItem == null)
{
    <p><em>Loading item details...</em></p>
}
else
{
    <div class="card shadow-sm mb-3" style="width: 50%;">
        <div class="card-body p-3">
            <div class="row">
                <div class="col">
                    <strong>Subject:</strong> @Subject?.Name <br />
                    <strong>Grading Period:</strong> @(SubjectGradingItem.GradingPeriod switch {
                        1 => "1st", 2 => "2nd", 3 => "3rd", 4 => "4th", _ => SubjectGradingItem.GradingPeriod.ToString()
                    }) <br />
                </div>
                <div class="col">
                    <strong>Component:</strong> @Component?.Name <br />
                    <strong>Subcomponent:</strong> @Subcomponent?.Name <br />
                </div>
                <div class="col">
                    <strong>% to Component:</strong> @Subcomponent?.Percentage% <br />
                    <strong>% to Subject:</strong> @(Subcomponent?.Percentage * Component?.Percentage / 100 ?? 0)% <br />
                </div>
            </div>
        </div>
    </div>

    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th style="width: 40%;">Student Name</th>
                <th style="width: 15%;">Items</th>
                <th style="width: 15%;">Result</th>
                <th style="width: 15%;">% to Items</th>
                <th style="width: 15%;">% to Subject</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in Students)
            {
                <tr>
                    <td>@($"{student.FirstName} {student.LastName}")</td>
                    <td>@SubjectGradingItem.ItemCount</td>
                    <td>
                        <input class="form-control"
                               @onchange="(e) => HandleScoreChange(e, student.Id)" />
                    </td>

                    <td>-</td>
                    <td>-</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public Guid SubjectGradingItemId { get; set; }

    private SubjectGradingItem? SubjectGradingItem;
    private Subject? Subject;
    private Component? Component;
    private Subcomponent? Subcomponent;
    private List<Student> Students = new();

    private Dictionary<Guid, string> StudentScores = new();

    protected override async Task OnInitializedAsync()
    {
        Students = await Http.GetFromJsonAsync<List<Student>>("api/student");

        if (SubjectGradingItemId == Guid.Empty)
        {
            await JS.InvokeVoidAsync("alert", "Invalid SubjectGradingItem ID.");
            NavigationManager.NavigateTo("/");
            return;
        }

        try
        {
            SubjectGradingItem = await Http.GetFromJsonAsync<SubjectGradingItem>($"api/SubjectGradingItem/{SubjectGradingItemId}");
            if (SubjectGradingItem == null)
            {
                await JS.InvokeVoidAsync("alert", "Subject Grading Item not found.");
                NavigationManager.NavigateTo("/");
                return;
            }

            Subject = await Http.GetFromJsonAsync<Subject>($"api/subject/{SubjectGradingItem.SubjectId}");
            if (Subject != null)
            {
                Component = Subject.Components?.FirstOrDefault(c => c.Subcomponents.Any(s => s.Id == SubjectGradingItem.SubcomponentId));
                Subcomponent = Component?.Subcomponents.FirstOrDefault(s => s.Id == SubjectGradingItem.SubcomponentId);
            }

        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error loading item results: {ex.Message}");
            Console.WriteLine($"Error: {ex.Message}");
        }

    }

    private void HandleScoreChange(ChangeEventArgs e, Guid studentId)
    {
        var inputValue = e.Value?.ToString();
        OnScoreChanged(studentId, inputValue);
    }

    private void OnScoreChanged(Guid studentId, string? score)
    {
        JS.InvokeVoidAsync("alert", $"Student ID: {studentId}, Score: {score}");
        // Later you’ll store this score in a dictionary or send it to an API
    }


}