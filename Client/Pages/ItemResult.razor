@page "/itemresult/{SubjectGradingItemId:guid}"

@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

@using SchoolApp.Shared.Models
@using System.Text.Json;

<h3>Input Student Results</h3>

@if (SubjectGradingItem == null)
{
    <p><em>Loading item details...</em></p>
}
else
{
    <div>
        <strong>Subject:</strong> @Subject?.Name <br />
        <strong>Component:</strong> @Component?.Name (@Component?.Percentage%) <br />
        <strong>Subcomponent:</strong> @Subcomponent?.Name (@Subcomponent?.Percentage%) <br />
        <strong>Grading Period:</strong> @(SubjectGradingItem.GradingPeriod switch { 1 => "1st", 2 => "2nd", 3 => "3rd", 4 => "4th", _ => SubjectGradingItem.GradingPeriod.ToString() }) <br />
        <strong>Number of Items:</strong> @SubjectGradingItem.ItemCount
    </div>

    <hr />

    <h4>Student Results</h4>

    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>Student Name</th>
                <th>Result (Score)</th>
                <th>% to Component</th>
                <th>% to Subject</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @* We'll add the student rows here in the next step *@
            <tr>
                <td colspan="5" class="text-center"><em>No student results loaded yet.</em></td>
            </tr>
        </tbody>
    </table>

}

@code {
    [Parameter] public Guid SubjectGradingItemId { get; set; }

    private SubjectGradingItem? SubjectGradingItem;
    private Subject? Subject;
    private Component? Component;
    private Subcomponent? Subcomponent;
    // We'll keep these properties but won't populate the table rows for now.
    // private List<Student>? Students;
    // private List<StudentResult> StudentResults = new List<StudentResult>();

    protected override async Task OnInitializedAsync()
    {
        if (SubjectGradingItemId == Guid.Empty)
        {
            await JS.InvokeVoidAsync("alert", "Invalid SubjectGradingItem ID.");
            NavigationManager.NavigateTo("/");
            return;
        }

        try
        {
            // 1. Get SubjectGradingItem details
            SubjectGradingItem = await Http.GetFromJsonAsync<SubjectGradingItem>($"api/SubjectGradingItem/{SubjectGradingItemId}");

            if (SubjectGradingItem == null)
            {
                await JS.InvokeVoidAsync("alert", "Subject Grading Item not found.");
                NavigationManager.NavigateTo("/");
                return;
            }

            // 2. Get Subject and its hierarchy to display details and percentages
            Subject = await Http.GetFromJsonAsync<Subject>($"api/subject/{SubjectGradingItem.SubjectId}");
            if (Subject != null)
            {
                Component = Subject.Components?.FirstOrDefault(c => c.Subcomponents.Any(s => s.Id == SubjectGradingItem.SubcomponentId));
                Subcomponent = Component?.Subcomponents.FirstOrDefault(s => s.Id == SubjectGradingItem.SubcomponentId);
            }

            // --- Commenting out student and student result loading for now ---
            // Students = await Http.GetFromJsonAsync<List<Student>>($"api/student/by-subject/{SubjectGradingItem.SubjectId}");
            // Students ??= new List<Student>();
            // var fetchedResults = await Http.GetFromJsonAsync<List<StudentResult>>($"api/StudentResult/by-subjectgradingitem/{SubjectGradingItemId}");
            // StudentResults = fetchedResults ?? new List<StudentResult>();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error loading item results: {ex.Message}");
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    // --- Commenting out the UpdateStudentScore method for now ---
    // private async Task UpdateStudentScore(Guid studentId, int newScore, Guid? studentResultId)
    // {
    //     // ... (Existing logic for saving/updating student scores) ...
    // }
}