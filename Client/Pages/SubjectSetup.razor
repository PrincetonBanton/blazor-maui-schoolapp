@page "/subject/setup"
@page "/subject/setup/{SubjectId:guid}"

@inject HttpClient Http
@inject IJSRuntime JS
@using System.Text.Json
@using SchoolApp.Shared.Models
@using SchoolApp.Client.Helpers
@inject SchoolApp.Shared.Services.SchoolContextService SchoolContext

    <div class="d-flex align-items-center mb-3">
        <select class="form-select me-2" style="width: 300px;" @onchange="OnSubjectChanged">
            <option value="">-- Choose Subject --</option>
            @foreach (var subject in Subjects)
            {
                <option value="@subject.Id">@subject.Name</option>
            }
        </select>
    </div>

    @if (SelectedSubjectId != null)
    {
    @if (ShowAddComponentModal)
    {
        <div class="modal fade show d-block" tabindex="-1" style="z-index: 1050;">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title">
                            @(IsEditingComponent ? "Edit Component" : "Add Component")
                        </h5>
                        <button type="button" class="btn-close" aria-label="Close"
                                @onclick="CloseComponentModal"></button>
                    </div>
                    <div class="modal-body">
                        <input type="text" class="form-control mb-2" placeholder="Component Name" @bind="NewComponentName" />
                        <input type="number" class="form-control mb-2" placeholder="% of Subject" @bind="NewComponentPercentage" />
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" style="width: 150px" @onclick="CloseComponentModal">Cancel</button>
                        @if (IsEditingComponent)
                        {
                            <button class="btn btn-warning" style="width: 150px" @onclick="OnUpdateComponentClicked">Update</button>
                        }
                        else
                        {
                            <button class="btn btn-success" style="width: 150px" @onclick="OnAddComponentClicked">Save</button>
                        }

                    </div>
                </div>
            </div>
        </div>
    }

    @if (ShowAddSubcomponentModal)
    {
        <div class="modal fade show d-block" tabindex="-1" style="z-index: 1050;">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title">
                            @(IsEditingSubcomponent ? "Edit Subcomponent" : "Add Subcomponent")
                        </h5>
                        <button type="button" class="btn-close" aria-label="Close"
                                @onclick="CloseSubcomponentModal"></button>
                    </div>
                    <div class="modal-body">
                        <p><strong>Component:</strong> @Components.FirstOrDefault(c => c.Id == SelectedComponentIdForSub)?.Name</p>
                        <input type="text" class="form-control mb-2" placeholder="Subcomponent Name" @bind="NewSubcomponentName" />
                        <input type="number" class="form-control mb-2" placeholder="% of Component" @bind="NewSubcomponentPercentage" />
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" style="width: 150px" @onclick="CloseSubcomponentModal">Cancel</button>
                        @if (IsEditingSubcomponent)
                        {
                            <button class="btn btn-warning" style="width: 150px" @onclick="OnUpdateSubcomponentClicked">Update</button>
                        }
                        else
                        {
                            <button class="btn btn-success" style="width: 150px" @onclick="OnConfirmAddSubcomponent">Save</button>
                        }

                    </div>
                </div>
            </div>
        </div>
    }
 }

@if (Components.Any())
{
    <table class="table table-bordered">
        <thead class="table-primary">
            <tr>
                <th style="width: 25%;">
                    @if (Math.Round(Components.Sum(c => c.Percentage)) < 100)
                    {
                        <button class="btn btn-primary btn-sm rounded-circle"
                                style="width: 32px; height: 32px; padding: 0;"
                                title="Add Component"
                                @onclick="() => ShowAddComponentModal = true">
                            +
                        </button>
                    }
                    else
                    {
                        @:Component
                    }
                </th>
                <th style="width: 10%;">Percent Sub</th>
                <th style="width: 25%;">Subcomponent</th>
                <th style="width: 10%;">Percent</th>
                <th style="width: 30%;"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var comp in Components)
            {
                var rowspan = comp.Subcomponents.Count == 0 ? 1 : comp.Subcomponents.Count;
                var subTotal = comp.Subcomponents.Sum(s => s.Percentage);
                bool subInvalid = Math.Round(subTotal) != 100;
                bool compInvalid = Math.Round(Components.Sum(c => c.Percentage)) != 100;

                <tr>
                    <!-- COMPONENT NAME + EDIT BUTTON -->
                    <td rowspan="@rowspan" style="color:@(subInvalid ? "red" : "black")">
                        <div class="d-flex justify-content-between align-items-center">
                            <strong>@comp.Name</strong>
                            <button class="btn btn-warning btn-sm rounded-circle"
                                    style="width: 28px; height: 28px; padding: 0;"
                                    title="Edit Component"
                                    @onclick="() => EditComponent(comp)">
                                ✏️
                            </button>
                        </div>
                    </td>

                    <td rowspan="@rowspan" style="color:@(compInvalid ? "red" : "black")">
                        @comp.Percentage%
                    </td>

                    @if (comp.Subcomponents.Count > 0)
                    {
                        <!-- FIRST SUBCOMPONENT -->
                        <td>
                            <div class="d-flex justify-content-between align-items-center">
                                <span>@comp.Subcomponents[0].Name</span>
                                @if (Math.Round(comp.Subcomponents.Sum(s => s.Percentage)) < 100)
                                {
                                    <button class="btn btn-primary btn-sm rounded-circle"
                                            style="width: 28px; height: 28px; padding: 0;"
                                            title="Add Subcomponent"
                                            @onclick="() => OpenSubcomponentModal(comp.Id)">
                                        +
                                    </button>
                                }
                            </div>
                        </td>
                        <td>@comp.Subcomponents[0].Percentage%</td>
                        <td>
                            <button class="btn btn-warning btn-sm rounded-circle"
                                    style="width: 28px; height: 28px; padding: 0;"
                                    title="Edit Subcomponent"
                                    @onclick="() => EditSubcomponent(comp.Subcomponents[0])">
                                ✏️
                            </button>
                        </td>
                    }
                    else
                    {
                        <!-- NO SUBCOMPONENTS -->
                        <td>
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="text-muted">No subcomponents</span>
                                <button class="btn btn-primary btn-sm rounded-circle"
                                        style="width: 28px; height: 28px; padding: 0;"
                                        title="Add Subcomponent"
                                        @onclick="() => OpenSubcomponentModal(comp.Id)">
                                    +
                                </button>
                            </div>
                        </td>
                        <td>0%</td>
                        <td></td>
                    }
                </tr>

                @for (int i = 1; i < comp.Subcomponents.Count; i++)
                {
                    var sub = comp.Subcomponents[i];
                    <tr>
                        <td>@sub.Name</td>
                        <td>@sub.Percentage%</td>
                        <td>
                            <button class="btn btn-warning btn-sm rounded-circle"
                                    style="width: 28px; height: 28px; padding: 0;"
                                    title="Edit Subcomponent"
                                    @onclick="() => EditSubcomponent(sub)">
                                ✏️
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <table class="table table-bordered w-auto mt-5">
        <thead class="table-secondary">
            <tr>
                <th>Component</th>
                <th>Component %</th>
                <th>Subcomponent %</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var comp in Components)
            {
                double subTotal = comp.Subcomponents?.Sum(s => s.Percentage) ?? 0;
                bool isComponentValid = Math.Round(subTotal) == 100;
                bool isSubcomponentValid = Math.Round(subTotal) == 100;

                <tr>
                    <td>@comp.Name</td>
                    <td style="color:@(isComponentValid ? "black" : "red")">@comp.Percentage%</td>
                    <td style="color:@(isSubcomponentValid ? "black" : "red")">@subTotal%</td>
                    <td>
                        @if (isComponentValid && isSubcomponentValid)
                        {
                            <span class="text-success fw-bold">Valid</span>
                        }
                        else
                        {
                            <span class="text-danger fw-bold">Invalid</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

}
else if (SelectedSubjectId != null)
{
    <div class="text-muted">
        <p>No components found for this subject.</p>
        <button class="btn btn-warning btn-sm" @onclick="() => ShowAddComponentModal = true">Add First Component</button>
    </div>
}

@if (SelectedSubject != null && SelectedSubject.IsValidated)
{
    <div class="mt-3 fw-bold text-success">Template Validated</div>
}
else if (IsTemplateStructureValid)
{
    <button class="btn btn-primary mt-3" @onclick="OnFinalValidateClicked">Validate Template</button>
}
else
{
    <div class="@ValidationMessageClass" style="margin-top: 1rem; font-weight: bold;">@ValidationMessage</div>
}

@code {
    [Parameter]
    public Guid? SubjectId { get; set; }

    private Guid? SelectedSubjectId;
    private Guid? SelectedComponentIdForSub = null;
    private List<Subject> Subjects = new();
    private List<Component> Components = new();
    private List<Subcomponent> SubComponents = new();

    private bool ShowAddComponentModal = false;
    private string NewComponentName = string.Empty;
    private double NewComponentPercentage = 0;

    private bool ShowAddSubcomponentModal = false;
    private string NewSubcomponentName = string.Empty;
    private double NewSubcomponentPercentage = 0;

    private void OpenSubcomponentModal(Guid componentId)
    {
        SelectedComponentIdForSub = componentId;
        NewSubcomponentName = string.Empty;
        NewSubcomponentPercentage = 0;
        ShowAddSubcomponentModal = true;
    }

    private string ValidationMessage { get; set; }
    private string ValidationMessageClass { get; set; }
    private bool IsTemplateStructureValid = false;
    private Subject SelectedSubject => Subjects.FirstOrDefault(s => s.Id == SelectedSubjectId);

    private bool IsEditingComponent = false;
    private Guid? EditingComponentId = null;

    private bool IsEditingSubcomponent = false;
    private Guid? EditingSubcomponentId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadSubjects();
        if (SubjectId != null && SubjectId != Guid.Empty)
        {
            SelectedSubjectId = SubjectId;
            var subject = await Http.GetFromJsonAsync<Subject>($"api/subject/{SubjectId}");
            await LoadComponents();
        }
    }

    private async Task LoadSubjects()
    {
        try
        {
            var allSubjects = await Http.GetFromJsonAsync<List<Subject>>("api/subject") ?? new();

            if (SchoolContext.SelectedGradeLevelId.HasValue)
            {
                Subjects = allSubjects
                    .Where(s => s.GradeLevelId == SchoolContext.SelectedGradeLevelId.Value && !s.IsValidated)
                    .ToList();
            }
            else
            {
                Subjects = new();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error loading subjects: {ex.Message}");
        }
    }

    private async Task OnSubjectChanged(ChangeEventArgs e)
    {
        try
        {
            var value = e?.Value?.ToString();
            if (Guid.TryParse(value, out var subjectId))
            {
                SelectedSubjectId = subjectId;
                await LoadComponents();
            }
            else
            {
                SelectedSubjectId = null;
                Components.Clear();
                await JS.InvokeVoidAsync("alert", "Invalid subject selected.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error fetching components: {ex.Message}");
        }
    }

    private async Task LoadComponents()
    {   
        if (SelectedSubjectId == Guid.Empty)
        {
            await JS.InvokeVoidAsync("alert", "Please select a valid subject.");
            return;
        }

        try
        {
            var rescomp = await Http.GetAsync($"api/Subject/{SelectedSubjectId}/Components");

            if (!rescomp.IsSuccessStatusCode)
            {
                var errorContent = await rescomp.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to load components:\n{errorContent}");
                return;
            }
            Components = await rescomp.Content.ReadFromJsonAsync<List<Component>>() ?? new List<Component>();

            foreach (var comp in Components)
            {
                var resub = await Http.GetAsync($"api/Subcomponent/by-component/{comp.Id.ToString().ToUpper()}");

                if (!resub.IsSuccessStatusCode)
                {
 
                    var errorContent = await resub.Content.ReadAsStringAsync();
                    await JS.InvokeVoidAsync("alert", $"Failed to load components:\n{errorContent}");
                    return;
                }
                comp.Subcomponents = await resub.Content.ReadFromJsonAsync<List<Subcomponent>>() ?? new List<Subcomponent>();
            }


            // Trigger validation after data has loaded and rendered
            StateHasChanged(); // Let the UI update first
            await Task.Delay(100);
            await ValidateComponentAndSubcomponentPercentages();

        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error loading components: {ex.Message}");
        }
    }

    private async Task ValidateComponentAndSubcomponentPercentages()
    {
        var result = TemplateValidator.Validate(Components);
        IsTemplateStructureValid = result.IsValid;
        ValidationMessage = result.Message;
        ValidationMessageClass = result.CssClass;
    }

    private async Task OnAddComponentClicked()
    {
        if (SelectedSubjectId == null || string.IsNullOrWhiteSpace(NewComponentName) || NewComponentPercentage <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Please provide valid component name and percentage.");
            return;
        }

        var newComponent = new Component
        {
            Name = NewComponentName,
            Percentage = NewComponentPercentage,
            SubjectId = SelectedSubjectId.Value
        };

        var json = JsonSerializer.Serialize(newComponent, new JsonSerializerOptions { WriteIndented = true });
        await JS.InvokeVoidAsync("alert", $"Component to post:\n{json}");

        try
        {
            var response = await Http.PostAsJsonAsync("api/component", newComponent);
            if (response.IsSuccessStatusCode)
            {
                NewComponentName = string.Empty;
                NewComponentPercentage = 0;
                await LoadComponents();
            }
            else
            {
                var err = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to add component: {err}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"AddComponent error: {ex.Message}");
        }
    }
    private async Task OnUpdateComponentClicked()
    {
        if (EditingComponentId == null || string.IsNullOrWhiteSpace(NewComponentName) || NewComponentPercentage <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Please provide valid component name and percentage.");
            return;
        }

        var updatedComponent = new Component
        {
            Id = EditingComponentId.Value,
            Name = NewComponentName,
            Percentage = NewComponentPercentage,
            SubjectId = SelectedSubjectId.Value
        };

        try
        {
            var response = await Http.PutAsJsonAsync($"api/component/{updatedComponent.Id}", updatedComponent);
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Component updated successfully.");
                CloseComponentModal();
                await LoadComponents();
            }
            else
            {
                var err = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to update component: {err}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"UpdateComponent error: {ex.Message}");
        }
    }


    private async Task OnConfirmAddSubcomponent()
    {
        if (SelectedComponentIdForSub == null || string.IsNullOrWhiteSpace(NewSubcomponentName) || NewSubcomponentPercentage <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Please provide valid subcomponent name and percentage.");
            return;
        }

        var newSubcomponent = new Subcomponent
        {
            Name = NewSubcomponentName,
            Percentage = NewSubcomponentPercentage,
            ComponentId = SelectedComponentIdForSub.Value
        };

        var json = JsonSerializer.Serialize(newSubcomponent, new JsonSerializerOptions { WriteIndented = true });
        await JS.InvokeVoidAsync("alert", $"Subcomponent to post:\n{json}");

        try
        {
            var response = await Http.PostAsJsonAsync("api/subcomponent", newSubcomponent);
            if (response.IsSuccessStatusCode)
            {
                NewSubcomponentName = string.Empty;
                NewSubcomponentPercentage = 0;
                ShowAddSubcomponentModal = false;
                await LoadComponents(); 
            }
            else
            {
                var err = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to add subcomponent: {err}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"AddSubcomponent error: {ex.Message}");
        }
    }

    private async Task OnUpdateSubcomponentClicked()
    {
        if (EditingSubcomponentId == null || string.IsNullOrWhiteSpace(NewSubcomponentName) || NewSubcomponentPercentage <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Please provide valid subcomponent name and percentage.");
            return;
        }

        var updatedSub = new Subcomponent
        {
            Id = EditingSubcomponentId.Value,
            Name = NewSubcomponentName,
            Percentage = NewSubcomponentPercentage,
            ComponentId = SelectedComponentIdForSub.Value
        };

        try
        {
            var response = await Http.PutAsJsonAsync($"api/subcomponent/{updatedSub.Id}", updatedSub);
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Subcomponent updated successfully.");
                CloseSubcomponentModal();
                await LoadComponents();
            }
            else
            {
                var err = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to update subcomponent: {err}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"UpdateSubcomponent error: {ex.Message}");
        }
    }


    private async Task OnFinalValidateClicked()
    {
        if (SelectedSubjectId == null)
        {
            await JS.InvokeVoidAsync("alert", "Please select a subject first.");
            return;
        }

        var confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to validate this template?");
        if (!confirm) return;
        try
        {
            var response = await Http.PutAsync($"api/subject/validate/{SelectedSubjectId}", null);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Template validated successfully.");
                await LoadSubjects();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to validate template: {error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error validating template: {ex.Message}");
        }
    }

    private void CloseComponentModal()
    {
        ShowAddComponentModal = false;
        IsEditingComponent = false;
        EditingComponentId = null;
        NewComponentName = string.Empty;
        NewComponentPercentage = 0;
    }

    private void CloseSubcomponentModal()
    {
        ShowAddSubcomponentModal = false;
        IsEditingSubcomponent = false;
        EditingSubcomponentId = null;
        NewSubcomponentName = string.Empty;
        NewSubcomponentPercentage = 0;
    }

    private void EditComponent(Component comp)
    {
        IsEditingComponent = true;
        EditingComponentId = comp.Id;
        NewComponentName = comp.Name;
        NewComponentPercentage = comp.Percentage;
        ShowAddComponentModal = true;
    }

    private void EditSubcomponent(Subcomponent sub)
    {
        IsEditingSubcomponent = true;
        EditingSubcomponentId = sub.Id;
        SelectedComponentIdForSub = sub.ComponentId;
        NewSubcomponentName = sub.Name;
        NewSubcomponentPercentage = sub.Percentage;
        ShowAddSubcomponentModal = true;
    }

}
