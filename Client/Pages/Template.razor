@page "/template"
@page "/template/{SubjectId:guid}"

@inject HttpClient Http
@inject IJSRuntime JS

@using SchoolApp.Shared.Models

@if (Subject == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h4>@Subject.Name</h4>

    @if (Subject.Components != null && Subject.Components.Any())
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Component</th>
                    <th>% of Subject</th>
                    <th>Subcomponent</th>
                    <th>% of Component</th>
                    <th colspan="4" class="text-center">Items per Grading</th>
                </tr>
                <tr>
                    <th colspan="4"></th>
                    <th class="text-center">1st</th>
                    <th class="text-center">2nd</th>
                    <th class="text-center">3rd</th>
                    <th class="text-center">4th</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var component in Subject.Components)
                {
                    int subCount = component.Subcomponents?.Count ?? 1;

                    for (int i = 0; i < subCount; i++)
                    {
                        var sub = component.Subcomponents != null && i < component.Subcomponents.Count
                        ? component.Subcomponents[i]
                        : null;

                        <tr>
                            @if (i == 0)
                            {
                                <td rowspan="@subCount">@component.Name</td>
                                <td rowspan="@subCount">@component.Percentage %</td>
                            }

                            @if (sub != null)
                            {
                                <td>@sub.Name</td>
                                <td>@sub.Percentage %</td>

                                @for (var grading = 1; grading <= 4; grading++)
                                {
                                    var currentGrading = grading; 

                                    <td>
                                        <div class="d-flex align-items-center">
                                            <input class="form-control form-control-sm me-1" type="number" min="0" style="width: 60px;"
                                                   @onchange="e => SaveItemCount(sub.Id, currentGrading, e.Value?.ToString())" />

                                            <button class="btn btn-sm btn-outline-primary" @onclick="@(() => LoadResults(sub.Id, currentGrading))">
                                                Load
                                            </button>
                                        </div>
                                    </td>
                                }

                            }
                            else
                            {
                                <td colspan="6"><em>No subcomponents</em></td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
    else
    {
        <p><em>No components found for this subject.</em></p>
    }
}

@code {
    [Parameter]
    public Guid SubjectId { get; set; }

    private Subject? Subject;

    protected override async Task OnInitializedAsync()
    {
        if (SubjectId != Guid.Empty)
        {
            try
            {
                Subject = await Http.GetFromJsonAsync<Subject>($"api/subject/{SubjectId}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to load subject: {ex.Message}");
            }
        }
    }

    private async void SaveItemCount(Guid subcomponentId, int grading, string? inputValue)
    {
        if (int.TryParse(inputValue, out int itemCount))
        {
            var item = new SubjectGradingItem
            {
                SubjectId = SubjectId,
                SubcomponentId = subcomponentId,
                GradingPeriod = grading,
                ItemCount = itemCount,
                CreatedAt = DateTime.Now
            };

            try
            {
                var response = await Http.PostAsJsonAsync("api/SubjectGradingItem", item);
                if (response.IsSuccessStatusCode)
                {
                    await JS.InvokeVoidAsync("alert", $"Saved!\nGrading: {grading}\nItem Count: {itemCount}");
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    await JS.InvokeVoidAsync("alert", $"Failed to save: {error}");
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
            }
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Invalid number");
        }
    }



    private void LoadResults(Guid subcomponentId, int grading)
    {
        Console.WriteLine($"Load Results for Subcomponent: {subcomponentId}, Grading: {grading}");
        // TODO: Navigate to student list with subjectId + subcomponentId + grading
    }
}
