@page "/template"
@page "/template/{SubjectId:guid}"

@inject HttpClient Http
@inject IJSRuntime JS

@using SchoolApp.Shared.Models

@if (Subject == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h4>@Subject.Name</h4>

    @if (Subject.Components != null && Subject.Components.Any())
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Component</th>
                    <th>% of Subject</th>
                    <th>Subcomponent</th>
                    <th>% of Component</th>
                    <th>1st</th>
                    <th>2nd</th>
                    <th>3rd</th>
                    <th>4th</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var component in Subject.Components)
                {
                    int subCount = component.Subcomponents?.Count ?? 1;

                    for (int i = 0; i < subCount; i++)
                    {
                        var sub = component.Subcomponents != null && i < component.Subcomponents.Count
                        ? component.Subcomponents[i]
                        : null;

                        <tr>
                            @if (i == 0)
                            {
                                <td rowspan="@subCount">@component.Name</td>
                                <td rowspan="@subCount">@component.Percentage %</td>
                            }

                            @if (sub != null)
                            {
                                <td>@sub.Name</td>
                                <td>@sub.Percentage %</td>

                                @for (int gradingPeriod = 1; gradingPeriod <= 4; gradingPeriod++)
                                {
                                    // Capture the current gradingPeriod value in a new local variable for each iteration
                                    var currentLoopGradingPeriod = gradingPeriod;

                                    // Get the stored item count for this subcomponent and grading period
                                    int currentItemCount = itemInputs.TryGetValue((sub.Id, currentLoopGradingPeriod), out int val) ? val : 0;

                                    <td>
                                        @if (currentItemCount == 0)
                                        {
                                            <span>-</span>
                                        }
                                        else
                                        {
                                            <span>@currentItemCount</span>
                                        }
                                        <button class="btn btn-sm btn-primary ms-1"
                                                @onclick="() => OpenGradeInputModal(sub.Id, sub.Name, currentLoopGradingPeriod, currentItemCount)">
                                            Save
                                        </button>
                                    </td>
                                }
                            }
                            else
                            {
                                <td colspan="6"><em>No subcomponents</em></td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
    else
    {
        <p><em>No components found for this subject.</em></p>
    }
}

@if (ShowGradeInputModal)
{
    <div class="modal-backdrop fade show" style="z-index: 1040;"></div>
    <div class="modal fade show d-block" tabindex="-1" style="z-index: 1050;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Enter Grade for @ModalSubcomponentName (@(ModalGradingPeriod switch { 1 => "1st", 2 => "2nd", 3 => "3rd", 4 => "4th", _ => ModalGradingPeriod.ToString() }))</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseGradeInputModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="itemCountInput" class="form-label">Item Count:</label>
                        <input type="number" id="itemCountInput" class="form-control" @bind-value="ModalItemCount" min="0" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseGradeInputModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="HandleGradeSave">Save</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter] public Guid SubjectId { get; set; }
    private Subject? Subject;

    // Stores current input values for display/edit, mapping (SubcomponentId, GradingPeriod) to ItemCount
    private Dictionary<(Guid SubcomponentId, int GradingPeriod), int> itemInputs = new();

    // Modal state variables
    private bool ShowGradeInputModal = false;
    private Guid ModalSubcomponentId { get; set; }
    private string ModalSubcomponentName { get; set; } = string.Empty;
    private int ModalGradingPeriod { get; set; }
    private int ModalItemCount { get; set; } // This will be bound to the modal's input

    protected override async Task OnInitializedAsync()
    {
        if (SubjectId == Guid.Empty) return;

        try
        {
            Subject = await Http.GetFromJsonAsync<Subject>($"api/subject/{SubjectId}");
            if (Subject == null) return;
            await LoadExistingGrades();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error loading data: {ex.Message}");
        }
    }

    private async Task LoadExistingGrades()
    {
        itemInputs.Clear(); 

        try
        {
            var grades = await Http.GetFromJsonAsync<List<SubjectGradingItem>>($"api/SubjectGradingItem/by-subject/{SubjectId}");

            if (grades != null)
            {
                foreach (var grade in grades)
                {
                    // Populate the itemInputs dictionary with fetched values
                    itemInputs[(grade.SubcomponentId, grade.GradingPeriod)] = grade.ItemCount;
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Failed to load existing grades: {ex.Message}");
        }
    }

    private void OpenGradeInputModal(Guid subcomponentId, string subcomponentName, int gradingPeriod, int currentItemCount)
    {
        ModalSubcomponentId = subcomponentId;
        ModalSubcomponentName = subcomponentName;
        ModalGradingPeriod = gradingPeriod;
        ModalItemCount = currentItemCount; 
        ShowGradeInputModal = true;
    }

    private void CloseGradeInputModal()
    {
        ShowGradeInputModal = false;
    }

    private async Task HandleGradeSave()
    {
        ShowGradeInputModal = false;
        var subjectGradingItem = new SubjectGradingItem
        {
            SubjectId = SubjectId,
            SubcomponentId = ModalSubcomponentId,
            GradingPeriod = ModalGradingPeriod, 
            ItemCount = ModalItemCount
        };


        try
        {
            var response = await Http.PostAsJsonAsync("api/SubjectGradingItem", subjectGradingItem);

            if (response.IsSuccessStatusCode)
            {
                // Update the local dictionary with the new saved value
                itemInputs[(subjectGradingItem.SubcomponentId, subjectGradingItem.GradingPeriod)] = subjectGradingItem.ItemCount;
                await JS.InvokeVoidAsync("alert", "Grade saved successfully!");
                StateHasChanged();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to save grade: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error saving grade: {ex.Message}");
        }
    }
}