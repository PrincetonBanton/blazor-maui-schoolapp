@page "/template"
@page "/template/{SubjectId:guid}"

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JS

@using SchoolApp.Shared.Models
@using System.Text.Json;

@if (Subject == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h4>@Subject.Name</h4>

    @if (Subject.Components != null && Subject.Components.Any())
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Component</th>
                    <th>% of Subject</th>
                    <th>Subcomponent</th>
                    <th>% of Component</th>
                    <th>1st</th>
                    <th>2nd</th>
                    <th>3rd</th>
                    <th>4th</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var component in Subject.Components)
                {
                    int subCount = component.Subcomponents?.Count ?? 1;

                    for (int i = 0; i < subCount; i++)
                    {
                        var sub = component.Subcomponents != null && i < component.Subcomponents.Count
                        ? component.Subcomponents[i]
                        : null;

                        <tr>
                            @if (i == 0)
                            {
                                <td rowspan="@subCount">@component.Name</td>
                                <td rowspan="@subCount">@component.Percentage %</td>
                            }

                            @if (sub != null)
                            {
                                <td>@sub.Name</td>
                                <td>@sub.Percentage %</td>

                                @for (int gradingPeriod = 1; gradingPeriod <= 4; gradingPeriod++)
                                {
                                    var currentLoopGradingPeriod = gradingPeriod;

                                    // Find the existing grade item for this subcomponent and grading period
                                    var existingGrade = SubjectGradingItems.FirstOrDefault(
                                    g => g.SubjectId == SubjectId &&
                                    g.SubcomponentId == sub.Id &&
                                    g.GradingPeriod == currentLoopGradingPeriod
                                    );

                                    // Get currentItemCount and SubjectGradingItemId from the found grade (or default values)
                                    int currentItemCount = existingGrade?.ItemCount ?? 0;
                                    Guid? subjectGradingItemId = existingGrade?.Id;

                                    <td>
                                        <div style="display: grid; grid-template-columns: 1fr 1fr; align-items: center; gap: 5px;">
                                            @if (currentItemCount == 0)
                                            {
                                                <span style="text-align: center;">-</span>
                                                <button class="btn btn-sm btn-primary ms-1"
                                                        @onclick="() => OpenGradeInputModal(sub.Id, sub.Name, currentLoopGradingPeriod, currentItemCount)">
                                                    +
                                                </button>
                                            }
                                            else
                                            {
                                                <span style="text-align: center;">@currentItemCount</span>
                                                <button class="btn btn-sm btn-info ms-1"
                                                        @onclick="() => OpenGradeEditModal(SubjectId, sub.Id, currentLoopGradingPeriod, currentItemCount, subjectGradingItemId)">
                                                    Edit
                                                </button>
                                                <button class="btn btn-sm btn-success ms-1"
                                                        @onclick="() => NavigateToItemResult(subjectGradingItemId)">
                                                    Results
                                                </button>
                                            }
                                        </div>

                                    </td>
                                }
                            }
                            else
                            {
                                <td colspan="6"><em>No subcomponents</em></td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
    else
    {
        <p><em>No components found for this subject.</em></p>
    }
}

@if (ShowGradeInputModal)
{
    <div class="modal-backdrop fade show" style="z-index: 1040;"></div>
    <div class="modal fade show d-block" tabindex="-1" style="z-index: 1050;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Enter Grade for @ModalSubcomponentName (@(ModalGradingPeriod switch { 1 => "1st", 2 => "2nd", 3 => "3rd", 4 => "4th", _ => ModalGradingPeriod.ToString() }))</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseGradeInputModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="itemCountInput" class="form-label">Item Count:</label>
                        <input type="number" id="itemCountInput" class="form-control" @bind-value="ModalItemCount" min="0" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseGradeInputModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="HandleGradeSave">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Guid SubjectId { get; set; }
    private Subject? Subject;

    // Now using a List<SubjectGradingItem> to hold the fetched and managed grade data
    private List<SubjectGradingItem> SubjectGradingItems { get; set; } = new List<SubjectGradingItem>();

    // Modal state variables
    private bool ShowGradeInputModal = false;
    private Guid ModalSubcomponentId { get; set; }
    private string ModalSubcomponentName { get; set; } = string.Empty;
    private int ModalGradingPeriod { get; set; }
    private int ModalItemCount { get; set; } // This will be bound to the modal's input
    // This property will hold the ID of the SubjectGradingItem being edited, if any.
    // It will be null for new entries.
    private Guid? ModalSubjectGradingItemId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (SubjectId == Guid.Empty) return;

        try
        {
            Subject = await Http.GetFromJsonAsync<Subject>($"api/subject/{SubjectId}");
            if (Subject == null) return;
            await LoadExistingGrades();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error loading data: {ex.Message}");
        }
    }

    private async Task LoadExistingGrades()
    {
        SubjectGradingItems.Clear(); // Clear existing data before loading fresh data

        try
        {
            var grades = await Http.GetFromJsonAsync<List<SubjectGradingItem>>($"api/SubjectGradingItem/by-subject/{SubjectId}");

            // This alert is for debugging; you might remove it in production.
            var json = JsonSerializer.Serialize(grades, new JsonSerializerOptions { WriteIndented = true });
            await JS.InvokeVoidAsync("alert", $"Fetched Grades:\n{json}");

            if (grades != null)
            {
                SubjectGradingItems.AddRange(grades); // Add all fetched items to our list
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Failed to load existing grades: {ex.Message}");
        }
    }

    // Opens the modal for entering a NEW grade (or editing if currentItemCount is passed)
    private void OpenGradeInputModal(Guid subcomponentId, string subcomponentName, int gradingPeriod, int currentItemCount)
    {
        ModalSubcomponentId = subcomponentId;
        ModalSubcomponentName = subcomponentName;
        ModalGradingPeriod = gradingPeriod;
        ModalItemCount = currentItemCount;
        ModalSubjectGradingItemId = null; // Ensure this is null when saving a new entry
        ShowGradeInputModal = true;
    }

    // Opens the modal for editing an EXISTING grade
    private async Task OpenGradeEditModal(Guid subjectId, Guid subcomponentId, int gradingPeriod, int itemCount, Guid? subjectGradingItemId)
    {
        // Format SubjectId for display, handling potential Guid.Empty
        string subjectIdDisplay = subjectId != Guid.Empty ? subjectId.ToString() : "N/A";

        if (subjectGradingItemId.HasValue)
        {
            await JS.InvokeVoidAsync("alert", $"Editing Grade:\nSubject ID: {subjectIdDisplay}\nSubcomponent ID: {subcomponentId}\nGrading Period: {gradingPeriod}\nItem Count: {itemCount}\nSubjectGradingItem ID: {subjectGradingItemId.Value}");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", $"Editing Grade:\nSubject ID: {subjectIdDisplay}\nSubcomponent ID: {subcomponentId}\nGrading Period: {gradingPeriod}\nNo existing SubjectGradingItem ID found.\nItem Count: {itemCount}");
        }


        ModalSubcomponentId = subcomponentId;
        ModalSubcomponentName = "You'd likely look up the subcomponent name using subcomponentId here, e.g., Subject.Components.FirstOrDefault(c => c.Id == subcomponentId)?.Name;";
        ModalGradingPeriod = gradingPeriod;
        ModalItemCount = itemCount;
        ModalSubjectGradingItemId = subjectGradingItemId;       // Crucial for identifying the item to update
        ShowGradeInputModal = true;                             // You can reuse the same modal by setting its properties
    }

    private void CloseGradeInputModal()
    {
        ShowGradeInputModal = false;
    }

    private async Task HandleGradeSave()
    {
        ShowGradeInputModal = false; // Close the modal
        var subjectGradingItem = new SubjectGradingItem
        {
            SubjectId = SubjectId,
            SubcomponentId = ModalSubcomponentId,
            GradingPeriod = ModalGradingPeriod,
            ItemCount = ModalItemCount
        };

        try
        {
            HttpResponseMessage response;

            // Determine if we are saving a new item (POST) or updating an existing one (PUT)
            if (ModalSubjectGradingItemId.HasValue && ModalSubjectGradingItemId.Value != Guid.Empty)
            {
                // This is an EDIT (PUT) operation
                subjectGradingItem.Id = ModalSubjectGradingItemId.Value; // Assign the existing ID
                response = await Http.PutAsJsonAsync($"api/SubjectGradingItem/{subjectGradingItem.Id}", subjectGradingItem);
            }
            else
            {
                // This is a SAVE (POST) operation for a new item
                response = await Http.PostAsJsonAsync("api/SubjectGradingItem", subjectGradingItem);
            }

            if (response.IsSuccessStatusCode)
            {
                if (ModalSubjectGradingItemId.HasValue && ModalSubjectGradingItemId.Value != Guid.Empty)
                {
                    // If it was an edit, find the existing item in the local list and update its ItemCount
                    var existing = SubjectGradingItems.FirstOrDefault(sgi => sgi.Id == ModalSubjectGradingItemId.Value);
                    if (existing != null)
                    {
                        existing.ItemCount = subjectGradingItem.ItemCount;
                    }
                }
                else
                {
                    var createdItem = await response.Content.ReadFromJsonAsync<SubjectGradingItem>();
                    if (createdItem != null)
                    {
                        SubjectGradingItems.Add(createdItem);
                    }
                }

                await JS.InvokeVoidAsync("alert", "Grade saved successfully!");
                StateHasChanged(); // Re-render the component to reflect the changes in the table
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to save grade: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error saving grade: {ex.Message}");
        }
    }

    private void NavigateToItemResult(Guid? subjectGradingItemId)
    {
        if (subjectGradingItemId.HasValue && subjectGradingItemId.Value != Guid.Empty)
        {
            NavigationManager.NavigateTo($"/itemresult/{subjectGradingItemId.Value}");
        }
        else
        {
            JS.InvokeVoidAsync("alert", "Cannot input results: No valid SubjectGradingItem ID found.");
        }
    }
}
