@page "/subject/list"
@using System.Text.Json
@using SchoolApp.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JS
@inject SchoolApp.Shared.Services.SchoolContextService SchoolContext

<SchoolContextSelector />

@if (!SchoolContext.SelectedSchoolYearId.HasValue)
{
    <div class="alert alert-warning mt-3">
        Please select a <strong>School Year</strong> to view subjects.
    </div>
}
else if (!SchoolContext.SelectedGradeLevelId.HasValue)
{
    <div class="alert alert-warning mt-3">
        Please select a <strong>Grade Level</strong> to view subjects.
    </div>
}

else if (subjects == null)
{
    <LoadingSpinner />
}
else if (!subjects.Any())
{
    <div class="alert alert-warning mt-3">
       No subjects found.
    </div>
}
else
{
    <div class="col-6 mb-3">
        <button class="btn btn-primary rounded-circle"
                style="width: 50px; height: 50px; font-size: larger;"
                @onclick="ShowAddSubjectModal">
            +
        </button>
    </div>

    <table class="table table-striped">
        <tbody>
            @{
                var index = 1;
            }
            @foreach (var subject in subjects)
            {
                <tr>
                    <td>@index</td>
                    <td>@subject.Name</td>
                    <td>
                        @if (subject.IsValidated)
                        {
                            <span class="text-success">Validated</span>
                        }
                        else
                        {
                            <span class="text-danger">Not Validated</span>
                        }
                    </td>
                    <td>
                        <div class="d-flex gap-3">
                            @if (subject.IsValidated)
                            {
                                <NavLink class="btn btn-primary btn-sm me-1" style="width:140px; height:30px;" href="@($"/subject/template/{subject.Id}")">
                                    Subject Template
                                </NavLink>
                            }
                            else
                            {
                                <NavLink class="btn btn-info btn-sm me-1" style="width:140px; height:30px;" href="@($"/subject/setup/{subject.Id}")">
                                    Subject Setup
                                </NavLink>
                            }
                            <button class="btn btn-sm btn-warning" style="width:80px;" @onclick="() => EditSubject(subject)">Edit</button>
                       </div>
                    </td>
                </tr>
                index++;
            }
        </tbody>
    </table>

    @if (ShowModal)
    {
        <div class="modal d-block" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title">@((IsEditMode ? "Edit Subject" : "Add Subject"))</h5>
                        <button type="button" class="btn-close" @onclick="HideSubjectModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <div class="alert alert-info d-flex align-items-center justify-content-between p-3 mb-3 border" style="min-height: 50px;">
                                <strong>@SchoolContext.GetSelectedGradeLevelName()</strong>
                                <small>ID: @(SchoolContext.SelectedSchoolSectionId?.ToString() ?? "N/A")</small>
                            </div>
                        </div>
                        <input type="text" class="form-control mb-3" placeholder="Subject Name" @bind="NewSubjectName" />
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" style="width:150px" @onclick="HideSubjectModal">Cancel</button>
                        <button class="btn btn-primary" style="width:150px" @onclick="SaveSubjectAsync">@(IsEditMode ? "Update" : "Save")</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private List<Subject>? subjects;
    private Subject EditingSubject = new();
    private bool IsEditMode = false;
    private string NewSubjectName = string.Empty;
    private bool ShowModal = false;

    protected override async Task OnInitializedAsync()
    {
        SchoolContext.OnContextChanged += OnContextChanged;
        await LoadSubjects();
    }

    private async void OnContextChanged()
    {
        await LoadSubjects();
        StateHasChanged();
    }

    public void Dispose()
    {
        SchoolContext.OnContextChanged -= OnContextChanged;
    }


    private async Task LoadSubjects()
    {
        if (!SchoolContext.SelectedSchoolYearId.HasValue)
        {
            subjects = new();
            return;
        }

        try
        {
            var allSubjects = await Http.GetFromJsonAsync<List<Subject>>("api/subject") ?? new();

            if (SchoolContext.SelectedGradeLevelId.HasValue)
            {
                subjects = allSubjects
                    .Where(s => s.GradeLevelId == SchoolContext.SelectedGradeLevelId.Value)
                    .ToList();
            }
            else
            {
                subjects = new();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error loading subjects: {ex.Message}");
        }
    }

    private async Task AddSubject()
    {
        if (string.IsNullOrWhiteSpace(NewSubjectName))
        {
            await JS.InvokeVoidAsync("alert", "Subject name cannot be empty.");
            return;
        }

        if (subjects!.Any(s => s.Name.Trim().ToLower() == NewSubjectName.Trim().ToLower()))
        {
            await JS.InvokeVoidAsync("alert", "Subject already exists.");
            return;
        }

        var confirm = await JS.InvokeAsync<bool>("confirm", $"Add subject '{NewSubjectName}'?");
        if (!confirm) return;

        var newSubject = new Subject
        {
            Name = NewSubjectName,
            GradeLevelId = SchoolContext.SelectedGradeLevelId 
        }; 

        try
        {
            var response = await Http.PostAsJsonAsync("api/subject", newSubject);
            if (response.IsSuccessStatusCode)
            {
                NewSubjectName = string.Empty;
                await LoadSubjects();
            }
            else
            {
                var err = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to add subject: {err}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error adding subject: {ex.Message}");
        }
    }

    private void ShowAddSubjectModal()
    {
        NewSubjectName = string.Empty;
        EditingSubject = new Subject();
        IsEditMode = false;
        ShowModal = true;
    }

    private void EditSubject(Subject subject)
    {
        EditingSubject = subject;
        NewSubjectName = subject.Name;
        IsEditMode = true;
        ShowModal = true;
    }

    private void HideSubjectModal()
    {
        ShowModal = false;
        IsEditMode = false;
        NewSubjectName = string.Empty;
        EditingSubject = new Subject();
    }

    private async Task SaveSubjectAsync()
    {
        if (string.IsNullOrWhiteSpace(NewSubjectName))
        {
            await JS.InvokeVoidAsync("alert", "Subject name cannot be empty.");
            return;
        }

        if (IsEditMode)
        {
            // Update
            EditingSubject.Name = NewSubjectName;

            var response = await Http.PutAsJsonAsync($"api/subject/{EditingSubject.Id}", EditingSubject);
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Subject updated!");
                HideSubjectModal();
                await LoadSubjects();
            }
            else
            {
                var err = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to update subject: {err}");
            }
        }
        else
        {
            // Add new
            if (subjects!.Any(s => s.Name.Trim().ToLower() == NewSubjectName.Trim().ToLower()))
            {
                await JS.InvokeVoidAsync("alert", "Subject already exists.");
                return;
            }

            var newSubject = new Subject
            {
                Name = NewSubjectName,
                GradeLevelId = SchoolContext.SelectedGradeLevelId
            };

            var response = await Http.PostAsJsonAsync("api/subject", newSubject);
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Subject added!");
                HideSubjectModal();
                await LoadSubjects();
            }
            else
            {
                var err = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to add subject: {err}");
            }
        }
    }


    //JS.InvokeVoidAsync("alert", $"subcount: {component}");
    //var json = JsonSerializer.Serialize(component, new JsonSerializerOptions { WriteIndented = true });
    //JS.InvokeVoidAsync("alert", json);
}
