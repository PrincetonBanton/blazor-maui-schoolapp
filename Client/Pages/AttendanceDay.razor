@page "/attendance/day/{dateString}"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject SchoolApp.Shared.Services.SchoolContextService SchoolContext
@using SchoolApp.Shared.Models

<SchoolContextSelector />

@if (!SchoolContext.SelectedSchoolSectionId.HasValue)
{
    <div class="alert alert-warning mt-3">
        Please select a School Section to record attendance.
    </div>
}
else if (Students == null)
{
    <LoadingSpinner />
}
else if (Students.Count == 0)
{
    <div class="alert alert-warning mt-3">
        No students found for this section.
    </div>
}
else
{
    <div class="card m-0" style="width:200px;">
        <div class="card-body text-center p-0">
            <h5 class="card-subtitle text-white border-bottom m-0 py-2" style="background-color:royalblue">
                @SelectedDate.ToString("MMMM yyyy")
            </h5>
            <h1 class="display-4 m-0"
                style="font-size:3rem; font-weight:bold; color:@(SelectedDate.DayOfWeek == DayOfWeek.Sunday ? "red" : "royalblue");">
                @SelectedDate.Day
            </h1>
            <h4 class="card-title py-2 m-0"
                style="color:@(SelectedDate.DayOfWeek == DayOfWeek.Sunday ? "red" : "black")">
                @SelectedDate.ToString("dddd")
            </h4>
        </div>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th class="text-center">Present</th>
                <th class="text-center">Absent</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in Students)
            {
                var isPresent = AttendanceMap.TryGetValue(student.Id, out var p) ? p : true;
                <tr>
                    <td>
                        @($"{student.LastName}, {student.FirstName} {student.MiddleName}".Trim())
                    </td>
                    <td class="text-center">
                        <input type="radio" name="att-@student.Id" checked="@isPresent"
                               @onchange="@(() => SetAttendance(student.Id, true))" />
                    </td>
                    <td class="text-center">
                        <input type="radio" name="att-@student.Id" checked="@(!isPresent)"
                               @onchange="@(() => SetAttendance(student.Id, false))" />
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="SaveAttendanceAsync">Save Attendance</button>
}

@code {
    [Parameter] public string dateString { get; set; } = string.Empty;

    private DateTime SelectedDate { get; set; }
    private List<Student>? Students { get; set; }  // nullable to distinguish "loading"
    private readonly Dictionary<Guid, bool> AttendanceMap = new();

    protected override async Task OnInitializedAsync()
    {
        SchoolContext.OnContextChanged += OnContextChanged;
        await LoadStudentsAsync();

        foreach (var s in Students ?? new())
        {
            if (!AttendanceMap.ContainsKey(s.Id))
                AttendanceMap[s.Id] = true;
        }
    }

    protected override void OnParametersSet()
    {
        if (DateTime.TryParseExact(dateString, "ddMMyyyy", null,
            System.Globalization.DateTimeStyles.None, out var parsedDate))
        {
            SelectedDate = parsedDate;
        }
        else
        {
            SelectedDate = DateTime.Today;
        }
    }

    private async Task LoadStudentsAsync()
    {
        try
        {
            if (!SchoolContext.SelectedSchoolSectionId.HasValue)
            {
                Students = new(); // no section selected
                return;
            }

            var allStudents = await Http.GetFromJsonAsync<List<Student>>("api/student") ?? new();
            Students = allStudents
                .Where(s => s.SchoolSectionId == SchoolContext.SelectedSchoolSectionId.Value)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading students: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "Failed to load students.");
        }
    }

    private async void OnContextChanged()
    {
        await LoadStudentsAsync();
        StateHasChanged();
    }

    public void Dispose()
    {
        SchoolContext.OnContextChanged -= OnContextChanged;
    }

    private void SetAttendance(Guid studentId, bool isPresent)
    {
        AttendanceMap[studentId] = isPresent;
    }

    private async Task SaveAttendanceAsync()
    {
        if (Students == null || !Students.Any())
        {
            await JS.InvokeVoidAsync("alert", "No students to save attendance for.");
            return;
        }

        // Separate present and absent students
        var presentStudents = Students
            .Where(s => AttendanceMap.TryGetValue(s.Id, out var p) ? p : true)
            .ToList();

        var absentStudents = Students
            .Where(s => AttendanceMap.TryGetValue(s.Id, out var p) ? !p : false)
            .ToList();

        // Build messages
        var presentMessage = presentStudents.Any()
            ? string.Join("\\n", presentStudents.Select(s =>
                $"ID: {s.Id} - {s.LastName}, {s.FirstName} {s.MiddleName}".Trim()))
            : "None";

        var absentMessage = absentStudents.Any()
            ? string.Join("\\n", absentStudents.Select(s =>
                $"ID: {s.Id} - {s.LastName}, {s.FirstName} {s.MiddleName}".Trim()))
            : "None";

        // Show alerts separately
        await JS.InvokeVoidAsync("alert", $"Present Students on {SelectedDate:MMMM dd, yyyy}:\n{presentMessage}");
        await JS.InvokeVoidAsync("alert", $"Absent Students on {SelectedDate:MMMM dd, yyyy}:\n{absentMessage}");
    }


}
