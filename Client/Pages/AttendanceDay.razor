@page "/attendance/day/{dateString}"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@using SchoolApp.Shared.Models

<h3>Attendance Day</h3>
<p>Selected Date: @SelectedDate.ToString("MMMM dd, yyyy")</p>

@if (Students.Count == 0)
{
    <p><em>Loading students...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Student Name</th>
                <th class="text-center">Present</th>
                <th class="text-center">Absent</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in Students)
            {
                var isPresent = AttendanceMap.TryGetValue(student.Id, out var p) ? p : true;
                <tr>
                    <td>
                        @(
                                        string.IsNullOrWhiteSpace(student.FullName)
                                        ? $"{student.FirstName} {student.LastName}".Trim()
                                        : student.FullName
                                        )
                </td>
                <td class="text-center">
                    <input type="radio"
                           name="att-@student.Id"
                           checked="@isPresent"
                           @onchange="@(() => SetAttendance(student.Id, true))" />
                </td>
                <td class="text-center">
                    <input type="radio"
                           name="att-@student.Id"
                           checked="@(!isPresent)"
                           @onchange="@(() => SetAttendance(student.Id, false))" />
                </td>
            </tr>
                }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="SaveAttendanceAsync">Save Attendance</button>
}

@code {
    [Parameter] public string dateString { get; set; } = string.Empty;

    private DateTime SelectedDate { get; set; }
    private List<Student> Students { get; set; } = new();

    // Local UI state: studentId => present?
    private readonly Dictionary<Guid, bool> AttendanceMap = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadStudentsAsync();
        // Ensure defaults to Present after load
        foreach (var s in Students)
        {
            if (!AttendanceMap.ContainsKey(s.Id))
                AttendanceMap[s.Id] = true;
        }
    }

    protected override void OnParametersSet()
    {
        if (DateTime.TryParseExact(dateString, "ddMMyyyy", null,
            System.Globalization.DateTimeStyles.None, out var parsedDate))
        {
            SelectedDate = parsedDate;
        }
        else
        {
            SelectedDate = DateTime.Today; // fallback
        }
    }

    private async Task LoadStudentsAsync()
    {
        try
        {
            Students = await Http.GetFromJsonAsync<List<Student>>("api/student") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading students: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "Failed to load students.");
        }
    }

    private void SetAttendance(Guid studentId, bool isPresent)
    {
        AttendanceMap[studentId] = isPresent;
        // StateHasChanged() not strictly necessary here because event triggers a render
    }

    // Stub: shows how you'd gather data to send to an API later
    private async Task SaveAttendanceAsync()
    {
        var payload = Students.Select(s => new
        {
            StudentId = s.Id,
            Date = SelectedDate,
            IsPresent = AttendanceMap.TryGetValue(s.Id, out var p) ? p : true
        }).ToList();

        // TODO: POST to your attendance endpoint, e.g.:
        // var resp = await Http.PostAsJsonAsync("api/attendance/bulk", payload);

        await JS.InvokeVoidAsync("alert", $"Prepared {payload.Count} attendance records for {SelectedDate:MMMM dd, yyyy}.");
    }
}
