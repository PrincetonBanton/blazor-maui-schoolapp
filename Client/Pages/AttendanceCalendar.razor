@page "/attendance/calendar"
@using System.Text.Json
@using SchoolApp.Shared.Models
@using SchoolApp.Client.Shared
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject SchoolApp.Shared.Services.SchoolContextService SchoolContext

<SchoolContextSelector />

<div class="mt-3 d-flex align-items-center">
@*     <div>
        <strong>SY:</strong>
        @(SchoolContext.GetSelectedSchoolYearStart()?.ToString("MMMM dd, yyyy") ?? "N/A")
        -
        @(SchoolContext.GetSelectedSchoolYearEnd()?.ToString("MMMM dd, yyyy") ?? "N/A")
    </div> *@
    <div class="ms-auto">
        <button class="btn btn-primary" style="width: 200px;" @onclick="ToggleMonthCalendar">
            @(ShowMonthCalendar ? "Hide Calendar" : "Show Calendar")
        </button>
    </div>
</div>

<div class="month-calendar-wrapper @(ShowMonthCalendar ? "show" : "hide")">
    <CalendarYear SelectedMonth="@SelectedMonth"
                  SelectedDay="@SelectedDay"
                  OnDayClicked="OnDayClicked"
                  SchoolYearStart="@SchoolContext.GetSelectedSchoolYearStart()"
                  SchoolYearEnd="@SchoolContext.GetSelectedSchoolYearEnd()" />
</div>

<CalendarMonth DaysInMonth="DaysInMonth"
               StartOffset="StartOffset"
               EndOffset="EndOffset"
               OnDayClicked="OnDayClicked" />

<style>
    .month-calendar-wrapper {
        max-height: 0;
        opacity: 0;
        overflow: hidden;
        transition: all 0.5s ease; 
    }

        .month-calendar-wrapper.show {
            max-height: 1000px; 
            opacity: 1;
        }

</style>

@code {
    private List<DateTime> DaysInMonth { get; set; } = new();
    private int _selectedMonth = DateTime.Now.Month;
    private DateTime? SelectedDay { get; set; }
    private int StartOffset { get; set; } = 0;
    private int EndOffset { get; set; } = 0;
    private bool ShowMonthCalendar { get; set; } = false;

    protected override void OnInitialized()
    {
        LoadCalendar();
        SchoolContext.OnContextChanged += StateHasChanged;
    }
    public void Dispose()
    {
        SchoolContext.OnContextChanged -= StateHasChanged; // cleanup
    }

    private void LoadCalendar()
    {
        DaysInMonth = Enumerable.Range(1, DateTime.DaysInMonth(DateTime.Now.Year, SelectedMonth))
            .Select(day => new DateTime(DateTime.Now.Year, SelectedMonth, day))
            .ToList();

        var firstDay = DaysInMonth.First();
        var lastDay = DaysInMonth.Last();
        StartOffset = (int)firstDay.DayOfWeek;  // Sunday = 0
        EndOffset = 6 - (int)lastDay.DayOfWeek; // Fill up to Saturday
    }

    private void ToggleMonthCalendar()
    {
        ShowMonthCalendar = !ShowMonthCalendar;
    }

    private void OnMiniDayClicked(DateTime day)
    {
        SelectedDay = day;
        OnDayClicked(day); // still navigate if you want
    }
     
    private int SelectedMonth
    {
        get => _selectedMonth;
        set
        {
            if (_selectedMonth != value)
            {
                _selectedMonth = value;
                LoadCalendar();
            }
        }
    }

    private void OnDayClicked(DateTime day)
    {
        NavigationManager.NavigateTo($"/attendance/day/{day:ddMMyyyy}");
    }
}
