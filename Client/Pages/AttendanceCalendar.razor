@page "/attendance/calendar"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@using SchoolApp.Shared.Models
@using SchoolApp.Client.Shared

<div class="mb-3 d-flex align-items-center">
    <select id="monthSelect" class="form-select w-25 d-inline-block me-2" @bind="SelectedMonth">
        @for (int m = 1; m <= 12; m++)
        {
            <option value="@m">@((new DateTime(DateTime.Now.Year, m, 1)).ToString("MMMM"))</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="ToggleMonthCalendar">
        @(ShowMonthCalendar ? "Hide Calendar" : "Show Calendar")
    </button>
</div>

@if (ShowMonthCalendar)
{
    <MonthCalendar DaysInMonth="DaysInMonth"
                   StartOffset="StartOffset"
                   EndOffset="EndOffset"
                   OnDayClicked="OnDayClicked" />
}

<!-- Year Calendar (4x3) -->
<div class="year-calendar">
    @for (int m = 1; m <= 12; m++)
    {
        var daysInMonth = Enumerable.Range(1, DateTime.DaysInMonth(DateTime.Now.Year, m))
        .Select(day => new DateTime(DateTime.Now.Year, m, day))
        .ToList();

        var firstDay = daysInMonth.First();
        var startOffset = (int)firstDay.DayOfWeek;
        var lastDay = daysInMonth.Last();
        var endOffset = 6 - (int)lastDay.DayOfWeek;

        <div class="year-month @(m == SelectedMonth ? "selected" : "")">
            <div class="month-title">
                @(new DateTime(DateTime.Now.Year, m, 1).ToString("MMMM"))
            </div>

            <div class="mini-calendar">
                <!-- Week headers -->
                <div class="mini-header">S</div>
                <div class="mini-header">M</div>
                <div class="mini-header">T</div>
                <div class="mini-header">W</div>
                <div class="mini-header">T</div>
                <div class="mini-header">F</div>
                <div class="mini-header">S</div>

                <!-- Empty slots before first day -->
                @for (int i = 0; i < startOffset; i++)
                {
                    <div class="mini-day empty"></div>
                }

                <!-- Actual days -->
                @foreach (var day in daysInMonth)
                {
                    <div class="mini-day @(day.DayOfWeek == DayOfWeek.Sunday ? "sunday" : "")
                                 @(day.Date == DateTime.Today.Date ? "today" : "")
                                 @(SelectedDay.HasValue && day.Date == SelectedDay.Value.Date ? "selected" : "")"
                         @onclick="() => OnMiniDayClicked(day)">
                        @day.Day
                    </div>
                }


                <!-- Empty slots after last day -->
                @for (int i = 0; i < endOffset; i++)
                {
                    <div class="mini-day empty"></div>
                }
            </div>
        </div>
    }
</div>

<style>
    .year-calendar {
        display: grid;
        grid-template-columns: repeat(4, 1fr); /* 4 months per row */
        gap: 10px;
    }

    .year-month {
        padding: 10px;
        border: 1px solid #ccc;
        text-align: center;
        font-weight: bold;
        background: #fff;
        transition: background-color 0.2s;
    }

        .year-month:hover {
            background-color: #e2e6ea;
        }

            .year-month:hover .mini-day {
                background-color: #e2e6ea;
            }

        /* Selected default */
        .year-month.selected {
            background-color: royalblue;
            color: white;
            border-color: darkblue;
        }

            /* When selected month is hovered */
            .year-month.selected:hover {
                background-color: #e2e6ea;
                color: black; /* reset text color so it doesn’t stay white */
                border-color: #ccc; /* reset border to match normal hover */
            }
            .year-month.selected:hover .mini-day {
                background-color: #e2e6ea;
            }

    .month-title {
        text-align: center;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .mini-calendar {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        font-size: 0.7rem;
        text-align: center;
    }

    .mini-header {
        font-weight: bold;
        background: royalblue;
        color: white;
        padding: 2px;
        border: 1px solid #ccc;
    }

    .mini-day {
        border: 1px solid #ccc;
        padding: 3px;
        transition: background-color 0.2s;
        cursor: pointer;
    }

        .mini-day:not(.empty):hover {
            background-color: red !important;
        }
        .mini-day.today {
            background: yellow;
        }
        .mini-day.sunday {
            color: red;
        }
</style>

@code {
    private bool ShowMonthCalendar { get; set; } = false;
    private void ToggleMonthCalendar()
    {
        ShowMonthCalendar = !ShowMonthCalendar;
    }
    private DateTime? SelectedDay { get; set; }
    private void OnMiniDayClicked(DateTime day)
    {
        SelectedDay = day;
        OnDayClicked(day); // still navigate if you want
    }

    private int _selectedMonth = DateTime.Now.Month;
    private int SelectedMonth
    {
        get => _selectedMonth;
        set
        {
            if (_selectedMonth != value)
            {
                _selectedMonth = value;
                LoadCalendar();
            }
        }
    }

    private List<DateTime> DaysInMonth { get; set; } = new();
    private int StartOffset { get; set; } = 0;
    private int EndOffset { get; set; } = 0;

    protected override void OnInitialized()
    {
        LoadCalendar();
    }

    private void LoadCalendar()
    {
        DaysInMonth = Enumerable.Range(1, DateTime.DaysInMonth(DateTime.Now.Year, SelectedMonth))
            .Select(day => new DateTime(DateTime.Now.Year, SelectedMonth, day))
            .ToList();

        // Offset before first day
        var firstDay = DaysInMonth.First();
        StartOffset = (int)firstDay.DayOfWeek; // Sunday = 0

        // Offset after last day
        var lastDay = DaysInMonth.Last();
        EndOffset = 6 - (int)lastDay.DayOfWeek; // Fill up to Saturday
    }

    private void OnDayClicked(DateTime day)
    {
        NavigationManager.NavigateTo($"/attendance/day/{day:ddMMyyyy}");
    }
}
