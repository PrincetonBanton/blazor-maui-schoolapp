@page "/attendance/calendar"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@using SchoolApp.Shared.Models
@using SchoolApp.Client.Shared

<div class="mb-3 d-flex align-items-center">
    <select id="monthSelect" class="form-select w-25 d-inline-block me-2" @bind="SelectedMonth">
        @for (int m = 1; m <= 12; m++)
        {
            <option value="@m">@((new DateTime(DateTime.Now.Year, m, 1)).ToString("MMMM"))</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="ToggleMonthCalendar">
        @(ShowMonthCalendar ? "Hide Calendar" : "Show Calendar")
    </button>
</div>

@if (ShowMonthCalendar)
{
    <MonthCalendar DaysInMonth="DaysInMonth"
                   StartOffset="StartOffset"
                   EndOffset="EndOffset"
                   OnDayClicked="OnDayClicked" />
}

<YearCalendar SelectedMonth="@SelectedMonth"
              SelectedDay="@SelectedDay"
              OnDayClicked="OnDayClicked" />

@code {
    private bool ShowMonthCalendar { get; set; } = false;
    private void ToggleMonthCalendar()
    {
        ShowMonthCalendar = !ShowMonthCalendar;
    }
    private DateTime? SelectedDay { get; set; }
    private void OnMiniDayClicked(DateTime day)
    {
        SelectedDay = day;
        OnDayClicked(day); // still navigate if you want
    }

    private int _selectedMonth = DateTime.Now.Month;
    private int SelectedMonth
    {
        get => _selectedMonth;
        set
        {
            if (_selectedMonth != value)
            {
                _selectedMonth = value;
                LoadCalendar();
            }
        }
    }

    private List<DateTime> DaysInMonth { get; set; } = new();
    private int StartOffset { get; set; } = 0;
    private int EndOffset { get; set; } = 0;

    protected override void OnInitialized()
    {
        LoadCalendar();
    }

    private void LoadCalendar()
    {
        DaysInMonth = Enumerable.Range(1, DateTime.DaysInMonth(DateTime.Now.Year, SelectedMonth))
            .Select(day => new DateTime(DateTime.Now.Year, SelectedMonth, day))
            .ToList();

        // Offset before first day
        var firstDay = DaysInMonth.First();
        StartOffset = (int)firstDay.DayOfWeek; // Sunday = 0

        // Offset after last day
        var lastDay = DaysInMonth.Last();
        EndOffset = 6 - (int)lastDay.DayOfWeek; // Fill up to Saturday
    }

    private void OnDayClicked(DateTime day)
    {
        NavigationManager.NavigateTo($"/attendance/day/{day:ddMMyyyy}");
    }
}
