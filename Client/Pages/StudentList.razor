@page "/students/list"
@using System.Text.Json
@using SchoolApp.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JS
@inject SchoolApp.Shared.Services.SchoolContextService SchoolContext

<SchoolContextSelector />

@if (students == null)
{
    <LoadingSpinner />
}
else if (!students.Any())
{   <div class="alert alert-warning mt-3">
        No students found.
    </div>
}
else
{
    <div class="col-6 mb-3">
        <button class="btn btn-primary rounded-circle"
                style="width: 50px; height: 50px; font-size: larger;"
                @onclick="ShowStudentModal">
            +
        </button>
    </div>

    <table class="table table-striped">
        <tbody>
            @if (students.Count == 0)
            {
                <tr>
                    <td colspan="7" class="text-center text-muted">No student data to display yet.</td>
                </tr>
            }
            else
            {
                var index = 1;
                foreach (var student in students)
                {
                    <tr>
                        <td>@index</td>
                        <td>@($"{student.LastName}, {student.FirstName} {student.MiddleName}".Trim())</td>
                        <td>@student.DateOfBirth.ToString("yyyy-MM-dd")</td>
                        <td>@student.Gender</td>
                        <td>@student.Address</td>
                        <td>@student.ContactNumber</td>
                        <td>
                            <div class="d-flex gap-3">
                                <button class="btn btn-sm btn-warning" style="width:80px;" disabled>Edit</button>
                                <button class="btn btn-sm btn-danger" style="width:80px;" disabled>Delete</button>
                                <a class="btn btn-sm btn-primary" style="width:150px;" href="@($"/students/card/{student.Id}")">View Card</a>
                            </div>
                        </td>
                    </tr>
                    index++;
                }
            }
        </tbody>
    </table>
}

@if (ShowModal)
{
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Add Student</h5>
                    <button type="button" class="btn-close" @onclick="HideStudentModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Section</label>
                        <div class="alert alert-info p-2 mb-2">
                            <strong>@SchoolContext.GetSelectedSchoolSectionName()</strong>
                            <small>ID: @(SchoolContext.SelectedSchoolSectionId?.ToString() ?? "N/A")</small>
                        </div>
                    </div

                    <input class="form-control" placeholder="First Name" style="margin-bottom: 1rem;" @bind="NewStudent.FirstName" />
                    <input class="form-control" placeholder="Middle Name" style="margin-bottom: 1rem;" @bind="NewStudent.MiddleName" />
                    <input class="form-control" placeholder="Last Name" style="margin-bottom: 1rem;" @bind="NewStudent.LastName" />
                    <input type="date" class="form-control" style="margin-bottom: 1rem;" @bind="NewStudent.DateOfBirth" />
                    <select class="form-control" style="margin-bottom: 1rem;" @bind="NewStudent.Gender">
                        <option value="">Select Gender...</option>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                    </select>
                    <input class="form-control" placeholder="Address" style="margin-bottom: 1rem;" @bind="NewStudent.Address" />
                    <input class="form-control" placeholder="Contact Number" style="margin-bottom: 1rem;" @bind="NewStudent.ContactNumber" />
                </div>

                <div class="modal-footer">
                    <button class="btn btn-secondary" style="width:150px;" @onclick="HideStudentModal">Cancel</button>
                    <button class="btn btn-primary" style="width:150px;" @onclick="SaveStudentAsync">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Student> students = new();
    private Student NewStudent = new();
    private bool ShowModal = false;


    protected override async Task OnInitializedAsync()
    {
        SchoolContext.OnContextChanged += OnContextChanged;
        await LoadStudents();
    }

    private async void OnContextChanged()
    {
        await LoadStudents();
        StateHasChanged();
    }

    public void Dispose()
    {
        SchoolContext.OnContextChanged -= OnContextChanged;
    }


    private async Task LoadStudents()
    {
        try
        {
            var allStudents = await Http.GetFromJsonAsync<List<Student>>("api/student") ?? new();

            if (SchoolContext.SelectedSchoolSectionId.HasValue)
            {
                students = allStudents
                    .Where(s => s.SchoolSectionId == SchoolContext.SelectedSchoolSectionId.Value)
                    .ToList();
            }
            else
            {
                students = new(); // No grade level selected → no subjects
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "Failed to load students.");
        }

    }

private void ShowStudentModal()
{
    NewStudent = new Student
    {
        SchoolSectionId = SchoolContext.SelectedSchoolSectionId
    };
    ShowModal = true;
}

    private void HideStudentModal()
    {
        ShowModal = false;
    }

    private async Task SaveStudentAsync()
    {
        var json = JsonSerializer.Serialize(NewStudent, new JsonSerializerOptions { WriteIndented = true });
        JS.InvokeVoidAsync("alert", json);

        var response = await Http.PostAsJsonAsync("api/student", NewStudent);
        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Student saved!");
            HideStudentModal();
            await LoadStudents(); // reload list
        }
        else
        {
            var errorMsg = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error: {errorMsg}");
            await JS.InvokeVoidAsync("alert", $"Failed to save student: {errorMsg}");
        }
    }
}
