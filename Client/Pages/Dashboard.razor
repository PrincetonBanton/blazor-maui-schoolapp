@page "/"

@using System.Text.Json
@using SchoolApp.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JS
@inject SchoolApp.Shared.Services.SchoolContextService SchoolContext


<div class="d-flex align-items-start mb-3">
    <div class="me-3 d-flex align-items-center">
        <select class="form-control" style="width: 300px;" @onchange="OnSchoolYearChanged">
            <option value="" disabled selected hidden>Select School Year</option>
            @foreach (var sy in SchoolYears)
            {
                <option value="@sy.Id">@sy.SchoolYearName</option>
            }
        </select>


        <button class="btn btn-primary rounded-circle d-flex align-items-center justify-content-center"
                style="width: 30px; height: 30px; margin-left: 5px; font-size:larger" @onclick="ShowSchoolYearModal">
            +
        </button>
    </div>

    <div class="me-3 d-flex align-items-center">
        <select class="form-control" style="width: 300px;" @onchange="OnGradeLevelChanged">
            <option value="" disabled selected hidden>Select Grade Level</option>
            @if (GradeLevels == null || !GradeLevels.Any())
            {
                <option disabled>No grade levels yet</option>
            }
            else
            {
                @foreach (var gl in GradeLevels)
                {
                    <option value="@gl.Id">@gl.LevelName</option>
                }
            }
        </select>
        <button class="btn btn-primary rounded-circle d-flex align-items-center justify-content-center"
                style="width: 30px; height: 30px; margin-left: 5px; font-size:larger" @onclick="ShowGradeLevelModal">
            +
        </button>
    </div>

    <div class="me-3 d-flex align-items-center">
        <select class="form-control" style="width: 300px;" @onchange="OnSchoolSectionChanged">
            <option value="" disabled selected hidden>Select School Section</option>
            @if (SchoolSections == null || !SchoolSections.Any())
            {
                <option disabled>No school sections yet</option>
            }
            else
            {
                @foreach (var ss in SchoolSections)
                {
                    <option value="@ss.Id">@ss.SectionName</option>
                }
            }
        </select>
        <button class="btn btn-primary rounded-circle d-flex align-items-center justify-content-center"
                style="width: 30px; height: 30px; margin-left: 5px; font-size:larger" @onclick="ShowSchoolSectionModal">
            +
        </button>
    </div>
</div>

@if (ShowYearModal)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content shadow-lg">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Setup School Year</h5>
                    <button type="button" class="btn-close" @onclick="HideSchoolYearModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Start Date</label>
                        <input type="date" class="form-control" @bind="StartDate" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">End Date</label>
                        <input type="date" class="form-control" @bind="EndDate" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" style="width:150px;" @onclick="HideSchoolYearModal">Close</button>
                    <button class="btn btn-primary" style="width:150px;" @onclick="SaveSchoolYear">Save</button>
                </div>
            </div>
        </div>
    </div>
}
@if (ShowLevelModal)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content shadow-lg">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Grade Level</h5>
                    <button type="button" class="btn-close" @onclick="HideGradeLevelModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">School Year</label>
                        <input type="text" class="form-control" value="@SchoolContext.GetSelectedSchoolYearName()" disabled />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Grade Level Name</label>
                        <input type="text" class="form-control" @bind="NewGradeLevelName" placeholder="e.g. Grade 1" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" style="width:150px;" @onclick="HideGradeLevelModal">Close</button>
                    <button class="btn btn-primary" style="width:150px;" @onclick="SaveGradeLevel">Save</button>
                </div>
            </div>
        </div>
    </div>
}
@if (ShowSectionModal)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content shadow-lg">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">School Section</h5>
                    <button type="button" class="btn-close" @onclick="HideSchoolSectionModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">School Year</label>
                        <input type="text" class="form-control" value="@SchoolContext.GetSelectedSchoolYearName()" disabled />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Grade Level</label>
                        <input type="text" class="form-control" value="@SchoolContext.GetSelectedGradeLevelName()" disabled />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Section Name</label>
                        <input type="text" class="form-control" @bind="NewSchoolSectionName" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" style="width:150px;" @onclick="HideSchoolSectionModal">Close</button>
                    <button class="btn btn-primary" style="width:150px;" @onclick="SaveSchoolSection">Save</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private List<SchoolYear> SchoolYears { get; set; } = new();
    private List<GradeLevel> GradeLevels { get; set; } = new();
    private List<SchoolSection> SchoolSections{ get; set; } = new();

    private Guid? SelectedSchoolYearId { get; set; }
    private Guid? SelectedGradeLevelId { get; set; }
    private Guid? SelectedSchoolSectionId { get; set; }

    private DateTime StartDate { get; set; } = DateTime.Today; // today's date
    private DateTime EndDate { get; set; } = DateTime.Today.AddMonths(10); // 10 months later

    private bool ShowYearModal = false;
    private bool ShowLevelModal = false;
    private bool ShowSectionModal = false;
    private string NewGradeLevelName { get; set; } = string.Empty;
    private string NewSchoolSectionName { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadSchoolYears();
    }

    private async Task LoadSchoolYears()
    {
        SchoolYears = await Http.GetFromJsonAsync<List<SchoolYear>>("api/SchoolYear") ?? new();
        SchoolContext.SetSchoolYears(SchoolYears); // push into shared service
    }
    private async Task OnSchoolYearChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var id))
        {
            SelectedSchoolYearId = id;
            SchoolContext.SelectedSchoolYearId = id; // save globally
            var selectedName = SchoolYears.FirstOrDefault(sy => sy.Id == id)?.SchoolYearName;
            await LoadGradeLevel();
        }
    }

    private async Task LoadGradeLevel()
    {
        if (SelectedSchoolYearId == null)
        {
            GradeLevels = new();
            return;
        }

        GradeLevels = await Http.GetFromJsonAsync<List<GradeLevel>>(
            $"api/GradeLevel/BySchoolYear/{SelectedSchoolYearId}"
        ) ?? new();
        SchoolContext.SetGradeLevels(GradeLevels); // push into shared service
    }
    private async Task OnGradeLevelChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var id))
        {
            SelectedGradeLevelId = id;
            SchoolContext.SelectedGradeLevelId = id; // save globally
            var selectedLevel = GradeLevels.FirstOrDefault(sy => sy.Id == id)?.LevelName;
            await LoadSchoolSection();
        }
    }

    private async Task LoadSchoolSection()
    {
        if (SelectedGradeLevelId == null)
        {
            SchoolSections = new();
            return;
        }

        SchoolSections = await Http.GetFromJsonAsync<List<SchoolSection>>(
            $"api/SchoolSection/ByGradeLevel/{SelectedGradeLevelId}"
        ) ?? new();
        SchoolContext.SetSchoolSections(SchoolSections); // push into shared service
    }
    private async Task OnSchoolSectionChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var id))
        {
            SelectedSchoolSectionId = id;
            SchoolContext.SelectedSchoolSectionId = id; // save globally
            var selectedSection = SchoolSections.FirstOrDefault(sy => sy.Id == id)?.SectionName;
            ShowSectionData();
        }
    }
    private async Task ShowSectionData()
    {
        var sy = SelectedSchoolYearId?.ToString() ?? "None";
        var gl = SelectedGradeLevelId?.ToString() ?? "None";
        var ss = SelectedSchoolSectionId?.ToString() ?? "None";
        await JS.InvokeVoidAsync("alert", $"SchoolYearId: {sy}\nGradeLevelId: {gl}\nSchoolSectionId: {ss}");

        await JS.InvokeVoidAsync("alert",
            $"SchoolYearId: {SchoolContext.SelectedSchoolYearId}\n" +
            $"GradeLevelId: {SchoolContext.SelectedGradeLevelId}\n" +
            $"SchoolSectionId: {SchoolContext.SelectedSchoolSectionId}");
    }


    private async Task SaveSchoolYear()
    {
        var duplicate = SchoolYears.FirstOrDefault(sy => sy.StartDate.Year == StartDate.Year);
        if (duplicate != null)
        {
            var confirm = await JS.InvokeAsync<bool>("confirm",
                $"A school year starting {StartDate.Year} already exists ({duplicate.SchoolYearName}). Do you want to update it?");

            if (confirm)
            {
                duplicate.StartDate = StartDate;
                duplicate.EndDate = EndDate;
                duplicate.SchoolYearName = $"{StartDate.Year}-{EndDate.Year}";

                var response = await Http.PutAsJsonAsync($"api/SchoolYear/{duplicate.Id}", duplicate);

                if (response.IsSuccessStatusCode)
                {
                    await LoadSchoolYears();
                    SelectedSchoolYearId = duplicate.Id;
                    await JS.InvokeVoidAsync("alert", $"School Year {duplicate.SchoolYearName} updated!");
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "Error updating school year.");
                }
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Save cancelled.");
            }
        }
        else
        {
            // No duplicate, create new
            var schoolYear = new SchoolYear
            {
                Id = Guid.NewGuid(),
                StartDate = StartDate,
                EndDate = EndDate,
                SchoolYearName = $"{StartDate.Year}-{EndDate.Year}"
            };

            var response = await Http.PostAsJsonAsync("api/SchoolYear", schoolYear);

            if (response.IsSuccessStatusCode)
            {
                await LoadSchoolYears();
                SelectedSchoolYearId = schoolYear.Id;
                await JS.InvokeVoidAsync("alert", $"School Year {schoolYear.SchoolYearName} saved!");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Error saving school year.");
            }
        }

        HideSchoolYearModal();
    }

    private async Task SaveGradeLevel()
    {
        if (SelectedSchoolYearId == null)
        {
            await JS.InvokeVoidAsync("alert", "Please select a School Year first.");
            return;
        }

        if (string.IsNullOrWhiteSpace(NewGradeLevelName))
        {
            await JS.InvokeVoidAsync("alert", "Please enter a grade level name.");
            return;
        }

        var gradeLevel = new GradeLevel
        {
            Id = Guid.NewGuid(),
            SchoolYearId = SelectedSchoolYearId.Value,
            LevelName = NewGradeLevelName
        };

        var response = await Http.PostAsJsonAsync("api/GradeLevel", gradeLevel);

        if (response.IsSuccessStatusCode)
        {
            await LoadGradeLevel();
            SelectedGradeLevelId = gradeLevel.Id;
            await JS.InvokeVoidAsync("alert", $"Grade Level {gradeLevel.LevelName} saved!");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error saving grade level.");
        }

        HideGradeLevelModal();
        NewGradeLevelName = string.Empty;
    }

    private async Task SaveSchoolSection()
    {
        if (SelectedSchoolYearId == null)
        {
            await JS.InvokeVoidAsync("alert", "Please select a School Year first.");
            return;
        }
        if (SelectedGradeLevelId == null)
        {
            await JS.InvokeVoidAsync("alert", "Please select a Grade Level first.");
            return;
        }

        if (string.IsNullOrWhiteSpace(NewSchoolSectionName))
        {
            await JS.InvokeVoidAsync("alert", "Please enter a School Section name.");
            return;
        }

        var schoolSection = new SchoolSection
        {
            Id = Guid.NewGuid(),
            GradeLevelId = SelectedGradeLevelId.Value,
            SectionName = NewSchoolSectionName
        };

        var response = await Http.PostAsJsonAsync("api/SchoolSection", schoolSection);

        if (response.IsSuccessStatusCode)
        {
            await LoadSchoolSection();
            SelectedSchoolSectionId = schoolSection.Id;
            await JS.InvokeVoidAsync("alert", $"Grade Level {schoolSection.SectionName} saved!");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error saving school section.");
        }

        HideSchoolSectionModal();
        NewSchoolSectionName = string.Empty; 
    }

    private void ShowSchoolYearModal() { ShowYearModal = true; }
    private void HideSchoolYearModal() { ShowYearModal = false; }
    private void ShowGradeLevelModal() { ShowLevelModal = true; }
    private void HideGradeLevelModal() { ShowLevelModal = false; }
    private void ShowSchoolSectionModal() { ShowSectionModal = true; }
    private void HideSchoolSectionModal() { ShowSectionModal = false; }


}
