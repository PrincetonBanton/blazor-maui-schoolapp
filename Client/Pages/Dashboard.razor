@page "/"

@inject HttpClient Http
@inject IJSRuntime JS
@using System.Text.Json
@using SchoolApp.Shared.Models

<div class="d-flex align-items-center mb-3">
    <select class="form-control me-2" style="width: 300px;" @bind="SelectedSchoolYearId">
        @if (SchoolYears == null || !SchoolYears.Any())
        {
            <option disabled>No school years yet</option>
        }
        else
        {
            @foreach (var sy in SchoolYears)
            {
                <option value="@sy.Id">@sy.SchoolYearName</option>
            }
        }
    </select>
    <button class="btn btn-primary" style="width: 200px;" @onclick="ShowSchoolYearModal">
        + New School Year
    </button>
</div>
<div class="d-flex align-items-center mb-3">
    <select class="form-control me-2" style="width: 300px;" @bind="SelectedGradeLevelId">
        @if (GradeLevels == null || !GradeLevels.Any())
        {
            <option disabled>No grade levels yet</option>
        }
        else
        {
            @foreach (var gl in GradeLevels)
            {
                <option value="@gl.Id">@gl.LevelName</option>
            }
        }
    </select>
    <button class="btn btn-primary" style="width: 200px;" @onclick="ShowGradeLevelModal">
        + New School Year
    </button>
</div>


@if (ShowYearModal)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content shadow-lg">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Setup School Year</h5>
                    <button type="button" class="btn-close" @onclick="HideSchoolYearModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Start Date</label>
                        <input type="date" class="form-control" @bind="StartDate" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">End Date</label>
                        <input type="date" class="form-control" @bind="EndDate" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" style="width:150px;" @onclick="HideSchoolYearModal">Close</button>
                    <button class="btn btn-primary" style="width:150px;" @onclick="SaveSchoolYear">Save</button>
                </div>
            </div>
        </div>
    </div>
}
@if (ShowLevelModal)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content shadow-lg">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Grade Level</h5>
                    <button type="button" class="btn-close" @onclick="HideGradeLevelModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">School Year</label>
                        <input type="text" class="form-control" value="@GetSelectedSchoolYearName()" disabled />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Grade Level Name</label>
                        <input type="text" class="form-control" @bind="NewGradeLevelName" placeholder="e.g. Grade 1" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" style="width:150px;" @onclick="HideGradeLevelModal">Close</button>
                    <button class="btn btn-primary" style="width:150px;" @onclick="SaveGradeLevel">Save</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private List<SchoolYear> SchoolYears { get; set; } = new();
    private Guid? SelectedSchoolYearId { get; set; }
    private List<GradeLevel> GradeLevels { get; set; } = new();
    private Guid? SelectedGradeLevelId { get; set; }
    private DateTime StartDate { get; set; }
    private DateTime EndDate { get; set; }
    private bool ShowYearModal = false;
    private bool ShowLevelModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadSchoolYears();

        //defaults for the modal
        var currentYear = DateTime.Today.Year;
        StartDate = new DateTime(currentYear, 6, 1);
        EndDate = new DateTime(currentYear + 1, 3, 31);

        await LoadGradeLevel();
    }

    private async Task LoadSchoolYears()
    {
        SchoolYears = await Http.GetFromJsonAsync<List<SchoolYear>>("api/SchoolYear") ?? new();
        SelectedSchoolYearId = SchoolYears.FirstOrDefault()?.Id;
    }

    private async Task LoadGradeLevel()
    {
        GradeLevels = await Http.GetFromJsonAsync<List<GradeLevel>>("api/GradeLevel") ?? new();
        SelectedGradeLevelId = GradeLevels.FirstOrDefault()?.Id;
    }

    private void ShowSchoolYearModal()
    {
        ShowYearModal = true;
    }

    private void HideSchoolYearModal()
    {
        ShowYearModal = false;
    }

    private void ShowGradeLevelModal()
    {
        ShowLevelModal = true;
    }

    private void HideGradeLevelModal()
    {
        ShowLevelModal = false;
    }

    private async Task SaveSchoolYear()
    {
        // Check for duplicate school year by StartDate.Year
        var duplicate = SchoolYears.FirstOrDefault(sy => sy.StartDate.Year == StartDate.Year);

        if (duplicate != null)
        {
            // Ask user if they want to update instead of insert
            var confirm = await JS.InvokeAsync<bool>("confirm",
                $"A school year starting {StartDate.Year} already exists ({duplicate.SchoolYearName}). Do you want to update it?");

            if (confirm)
            {
                // Update existing school year
                duplicate.StartDate = StartDate;
                duplicate.EndDate = EndDate;
                duplicate.SchoolYearName = $"{StartDate.Year}-{EndDate.Year}";

                var response = await Http.PutAsJsonAsync($"api/SchoolYear/{duplicate.Id}", duplicate);

                if (response.IsSuccessStatusCode)
                {
                    await LoadSchoolYears();
                    SelectedSchoolYearId = duplicate.Id;
                    await JS.InvokeVoidAsync("alert", $"School Year {duplicate.SchoolYearName} updated!");
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "Error updating school year.");
                }
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Save cancelled.");
            }
        }
        else
        {
            // No duplicate, create new
            var schoolYear = new SchoolYear
            {
                Id = Guid.NewGuid(),
                StartDate = StartDate,
                EndDate = EndDate,
                SchoolYearName = $"{StartDate.Year}-{EndDate.Year}"
            };

            var response = await Http.PostAsJsonAsync("api/SchoolYear", schoolYear);

            if (response.IsSuccessStatusCode)
            {
                await LoadSchoolYears();
                SelectedSchoolYearId = schoolYear.Id;
                await JS.InvokeVoidAsync("alert", $"School Year {schoolYear.SchoolYearName} saved!");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Error saving school year.");
            }
        }

        HideSchoolYearModal();
    }
    private string NewGradeLevelName { get; set; } = string.Empty;

    private string GetSelectedSchoolYearName()
    {
        var sy = SchoolYears.FirstOrDefault(y => y.Id == SelectedSchoolYearId);
        return sy?.SchoolYearName ?? "No school year selected";
    }

    private async Task SaveGradeLevel()
    {
        if (SelectedSchoolYearId == null)
        {
            await JS.InvokeVoidAsync("alert", "Please select a School Year first.");
            return;
        }

        if (string.IsNullOrWhiteSpace(NewGradeLevelName))
        {
            await JS.InvokeVoidAsync("alert", "Please enter a grade level name.");
            return;
        }

        var gradeLevel = new GradeLevel
        {
            Id = Guid.NewGuid(),
            SchoolYearId = SelectedSchoolYearId.Value,
            LevelName = NewGradeLevelName
        };

        var response = await Http.PostAsJsonAsync("api/GradeLevel", gradeLevel);

        if (response.IsSuccessStatusCode)
        {
            await LoadGradeLevel();
            SelectedGradeLevelId = gradeLevel.Id;
            await JS.InvokeVoidAsync("alert", $"Grade Level {gradeLevel.LevelName} saved!");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error saving grade level.");
        }

        HideGradeLevelModal();
        NewGradeLevelName = string.Empty; // reset field
    }


}
